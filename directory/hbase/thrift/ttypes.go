/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hbase;

import (
        "thrift"
        "fmt"
)



/**
 *Specify type of delete:
 * - DELETE_COLUMN means exactly one version will be removed,
 * - DELETE_COLUMNS means previous versions will also be removed.
 */
type TDeleteType int
const (
  DELETE_COLUMN TDeleteType = 0
  DELETE_COLUMNS TDeleteType = 1
)
func (p TDeleteType) String() string {
  switch p {
  case DELETE_COLUMN: return "DELETE_COLUMN"
  case DELETE_COLUMNS: return "DELETE_COLUMNS"
  }
  return ""
}

func FromTDeleteTypeString(s string) TDeleteType {
  switch s {
  case "DELETE_COLUMN": return DELETE_COLUMN
  case "DELETE_COLUMNS": return DELETE_COLUMNS
  }
  return TDeleteType(-10000)
}

func (p TDeleteType) Value() int {
  return int(p)
}

func (p TDeleteType) IsEnum() bool {
  return true
}

/**
 *Specify Durability:
 * - SKIP_WAL means do not write the Mutation to the WAL.
 * - ASYNC_WAL means write the Mutation to the WAL asynchronously,
 * - SYNC_WAL means write the Mutation to the WAL synchronously,
 * - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
 */
type TDurability int
const (
  SKIP_WAL TDurability = 1
  ASYNC_WAL TDurability = 2
  SYNC_WAL TDurability = 3
  FSYNC_WAL TDurability = 4
)
func (p TDurability) String() string {
  switch p {
  case SKIP_WAL: return "SKIP_WAL"
  case ASYNC_WAL: return "ASYNC_WAL"
  case SYNC_WAL: return "SYNC_WAL"
  case FSYNC_WAL: return "FSYNC_WAL"
  }
  return ""
}

func FromTDurabilityString(s string) TDurability {
  switch s {
  case "SKIP_WAL": return SKIP_WAL
  case "ASYNC_WAL": return ASYNC_WAL
  case "SYNC_WAL": return SYNC_WAL
  case "FSYNC_WAL": return FSYNC_WAL
  }
  return TDurability(-10000)
}

func (p TDurability) Value() int {
  return int(p)
}

func (p TDurability) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - MinStamp
 *  - MaxStamp
 */
type TTimeRange struct {
  thrift.TStruct
  MinStamp int64 "minStamp"; // 1
  MaxStamp int64 "maxStamp"; // 2
}

func NewTTimeRange() *TTimeRange {
  output := &TTimeRange{
    TStruct:thrift.NewTStruct("TTimeRange", []thrift.TField{
    thrift.NewTField("minStamp", thrift.I64, 1),
    thrift.NewTField("maxStamp", thrift.I64, 2),
    }),
  }
  {
  }
  return output
}

func (p *TTimeRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "minStamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "maxStamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TTimeRange) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadI64()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "minStamp", p.ThriftName(), err1); }
  p.MinStamp = v0
  return err
}

func (p *TTimeRange) ReadFieldMinStamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TTimeRange) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadI64()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "maxStamp", p.ThriftName(), err3); }
  p.MaxStamp = v2
  return err
}

func (p *TTimeRange) ReadFieldMaxStamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TTimeRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TTimeRange")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TTimeRange) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("minStamp", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minStamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.MinStamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minStamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minStamp", p.ThriftName(), err); }
  return err
}

func (p *TTimeRange) WriteFieldMinStamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TTimeRange) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxStamp", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxStamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.MaxStamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxStamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxStamp", p.ThriftName(), err); }
  return err
}

func (p *TTimeRange) WriteFieldMaxStamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TTimeRange) TStructName() string {
  return "TTimeRange"
}

func (p *TTimeRange) ThriftName() string {
  return "TTimeRange"
}

func (p *TTimeRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTimeRange(%+v)", *p)
}

func (p *TTimeRange) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TTimeRange)
  if !ok {
    return 0, false
  }
  if p.MinStamp != data.MinStamp {
    if p.MinStamp < data.MinStamp {
      return -1, true
    }
    return 1, true
  }
  if p.MaxStamp != data.MaxStamp {
    if p.MaxStamp < data.MaxStamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TTimeRange) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MinStamp
  case 2: return p.MaxStamp
  }
  return nil
}

func (p *TTimeRange) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("minStamp", thrift.I64, 1),
    thrift.NewTField("maxStamp", thrift.I64, 2),
    })
}

/**
 * Addresses a single cell or multiple cells
 * in a HBase table by column family and optionally
 * a column qualifier and timestamp
 * 
 * Attributes:
 *  - Family
 *  - Qualifier
 *  - Timestamp
 */
type TColumn struct {
  thrift.TStruct
  Family string "family"; // 1
  Qualifier string "qualifier"; // 2
  Timestamp int64 "timestamp"; // 3
}

func NewTColumn() *TColumn {
  output := &TColumn{
    TStruct:thrift.NewTStruct("TColumn", []thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *TColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "family" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadString()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(1, "family", p.ThriftName(), err5); }
  p.Family = v4
  return err
}

func (p *TColumn) ReadFieldFamily(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TColumn) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadString()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(2, "qualifier", p.ThriftName(), err7); }
  p.Qualifier = v6
  return err
}

func (p *TColumn) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TColumn) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadI64()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err9); }
  p.Timestamp = v8
  return err
}

func (p *TColumn) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TColumn")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumn) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("family", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Family))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  return err
}

func (p *TColumn) WriteFieldFamily(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TColumn) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *TColumn) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TColumn) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TColumn) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TColumn) TStructName() string {
  return "TColumn"
}

func (p *TColumn) ThriftName() string {
  return "TColumn"
}

func (p *TColumn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumn(%+v)", *p)
}

func (p *TColumn) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TColumn)
  if !ok {
    return 0, false
  }
  if p.Family != data.Family {
    if p.Family < data.Family {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TColumn) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Family
  case 2: return p.Qualifier
  case 3: return p.Timestamp
  }
  return nil
}

func (p *TColumn) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    })
}

/**
 * Represents a single cell and its value.
 * 
 * Attributes:
 *  - Family
 *  - Qualifier
 *  - Value
 *  - Timestamp
 *  - Tags
 */
type TColumnValue struct {
  thrift.TStruct
  Family string "family"; // 1
  Qualifier string "qualifier"; // 2
  Value string "value"; // 3
  Timestamp int64 "timestamp"; // 4
  Tags string "tags"; // 5
}

func NewTColumnValue() *TColumnValue {
  output := &TColumnValue{
    TStruct:thrift.NewTStruct("TColumnValue", []thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("value", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    thrift.NewTField("tags", thrift.STRING, 5),
    }),
  }
  {
  }
  return output
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "family" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "tags" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadString()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(1, "family", p.ThriftName(), err11); }
  p.Family = v10
  return err
}

func (p *TColumnValue) ReadFieldFamily(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TColumnValue) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadString()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(2, "qualifier", p.ThriftName(), err13); }
  p.Qualifier = v12
  return err
}

func (p *TColumnValue) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TColumnValue) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadString()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err15); }
  p.Value = v14
  return err
}

func (p *TColumnValue) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TColumnValue) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v16, err17 := iprot.ReadI64()
  if err17 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err17); }
  p.Timestamp = v16
  return err
}

func (p *TColumnValue) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TColumnValue) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v18, err19 := iprot.ReadString()
  if err19 != nil { return thrift.NewTProtocolExceptionReadField(5, "tags", p.ThriftName(), err19); }
  p.Tags = v18
  return err
}

func (p *TColumnValue) ReadFieldTags(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TColumnValue")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("family", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Family))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteFieldFamily(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TColumnValue) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TColumnValue) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TColumnValue) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TColumnValue) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tags", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tags", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Tags))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tags", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tags", p.ThriftName(), err); }
  return err
}

func (p *TColumnValue) WriteFieldTags(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TColumnValue) TStructName() string {
  return "TColumnValue"
}

func (p *TColumnValue) ThriftName() string {
  return "TColumnValue"
}

func (p *TColumnValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnValue(%+v)", *p)
}

func (p *TColumnValue) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TColumnValue)
  if !ok {
    return 0, false
  }
  if p.Family != data.Family {
    if p.Family < data.Family {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  if p.Tags != data.Tags {
    if p.Tags < data.Tags {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TColumnValue) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Family
  case 2: return p.Qualifier
  case 3: return p.Value
  case 4: return p.Timestamp
  case 5: return p.Tags
  }
  return nil
}

func (p *TColumnValue) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("value", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    thrift.NewTField("tags", thrift.STRING, 5),
    })
}

/**
 * Represents a single cell and the amount to increment it by
 * 
 * Attributes:
 *  - Family
 *  - Qualifier
 *  - Amount
 */
type TColumnIncrement struct {
  thrift.TStruct
  Family string "family"; // 1
  Qualifier string "qualifier"; // 2
  Amount int64 "amount"; // 3
}

func NewTColumnIncrement() *TColumnIncrement {
  output := &TColumnIncrement{
    TStruct:thrift.NewTStruct("TColumnIncrement", []thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("amount", thrift.I64, 3),
    }),
  }
  {
    output.Amount = 1
  }
  return output
}

func (p *TColumnIncrement) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "family" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "amount" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumnIncrement) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v20, err21 := iprot.ReadString()
  if err21 != nil { return thrift.NewTProtocolExceptionReadField(1, "family", p.ThriftName(), err21); }
  p.Family = v20
  return err
}

func (p *TColumnIncrement) ReadFieldFamily(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TColumnIncrement) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadString()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(2, "qualifier", p.ThriftName(), err23); }
  p.Qualifier = v22
  return err
}

func (p *TColumnIncrement) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TColumnIncrement) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadI64()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(3, "amount", p.ThriftName(), err25); }
  p.Amount = v24
  return err
}

func (p *TColumnIncrement) ReadFieldAmount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TColumnIncrement) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TColumnIncrement")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TColumnIncrement) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("family", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Family))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "family", p.ThriftName(), err); }
  return err
}

func (p *TColumnIncrement) WriteFieldFamily(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TColumnIncrement) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *TColumnIncrement) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TColumnIncrement) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("amount", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "amount", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Amount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "amount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "amount", p.ThriftName(), err); }
  return err
}

func (p *TColumnIncrement) WriteFieldAmount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TColumnIncrement) TStructName() string {
  return "TColumnIncrement"
}

func (p *TColumnIncrement) ThriftName() string {
  return "TColumnIncrement"
}

func (p *TColumnIncrement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnIncrement(%+v)", *p)
}

func (p *TColumnIncrement) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TColumnIncrement)
  if !ok {
    return 0, false
  }
  if p.Family != data.Family {
    if p.Family < data.Family {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  if p.Amount != data.Amount {
    if p.Amount < data.Amount {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TColumnIncrement) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Family
  case 2: return p.Qualifier
  case 3: return p.Amount
  }
  return nil
}

func (p *TColumnIncrement) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("family", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    thrift.NewTField("amount", thrift.I64, 3),
    })
}

/**
 * if no Result is found, row and columnValues will not be set.
 * 
 * Attributes:
 *  - Row
 *  - ColumnValues
 */
type TResult struct {
  thrift.TStruct
  Row string "row"; // 1
  ColumnValues thrift.TList "columnValues"; // 2
}

func NewTResult() *TResult {
  output := &TResult{
    TStruct:thrift.NewTStruct("TResult", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columnValues", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *TResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columnValues" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadString()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err27); }
  p.Row = v26
  return err
}

func (p *TResult) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype33, _size30, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnValues", "", err)
  }
  p.ColumnValues = thrift.NewTList(_etype33, _size30)
  for _i34:= 0; _i34 < _size30; _i34++ {
    _elem35 := NewTColumnValue()
    err38 := _elem35.Read(iprot)
    if err38 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem35TColumnValue", err38); }
    p.ColumnValues.Push(_elem35)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TResult) ReadFieldColumnValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TResult) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ColumnValues != nil {
    err = oprot.WriteFieldBegin("columnValues", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnValues", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.ColumnValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter39 := range p.ColumnValues.Iter() {
      Iter40 := Iter39.(*TColumnValue)
      err = Iter40.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumnValue", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnValues", p.ThriftName(), err); }
  }
  return err
}

func (p *TResult) WriteFieldColumnValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TResult) TStructName() string {
  return "TResult"
}

func (p *TResult) ThriftName() string {
  return "TResult"
}

func (p *TResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TResult(%+v)", *p)
}

func (p *TResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TResult)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ColumnValues.CompareTo(data.ColumnValues); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.ColumnValues
  }
  return nil
}

func (p *TResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columnValues", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Labels
 */
type TAuthorization struct {
  thrift.TStruct
  Labels thrift.TList "labels"; // 1
}

func NewTAuthorization() *TAuthorization {
  output := &TAuthorization{
    TStruct:thrift.NewTStruct("TAuthorization", []thrift.TField{
    thrift.NewTField("labels", thrift.LIST, 1),
    }),
  }
  {
  }
  return output
}

func (p *TAuthorization) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "labels" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TAuthorization) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype46, _size43, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Labels", "", err)
  }
  p.Labels = thrift.NewTList(_etype46, _size43)
  for _i47:= 0; _i47 < _size43; _i47++ {
    v49, err50 := iprot.ReadString()
    if err50 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem48", "", err50); }
    _elem48 := v49
    p.Labels.Push(_elem48)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TAuthorization) ReadFieldLabels(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TAuthorization) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TAuthorization")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TAuthorization) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Labels != nil {
    err = oprot.WriteFieldBegin("labels", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "labels", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Labels.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter51 := range p.Labels.Iter() {
      Iter52 := Iter51.(string)
      err = oprot.WriteString(string(Iter52))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter52", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "labels", p.ThriftName(), err); }
  }
  return err
}

func (p *TAuthorization) WriteFieldLabels(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TAuthorization) TStructName() string {
  return "TAuthorization"
}

func (p *TAuthorization) ThriftName() string {
  return "TAuthorization"
}

func (p *TAuthorization) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAuthorization(%+v)", *p)
}

func (p *TAuthorization) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TAuthorization)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Labels.CompareTo(data.Labels); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TAuthorization) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Labels
  }
  return nil
}

func (p *TAuthorization) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("labels", thrift.LIST, 1),
    })
}

/**
 * Attributes:
 *  - Expression
 */
type TCellVisibility struct {
  thrift.TStruct
  Expression string "expression"; // 1
}

func NewTCellVisibility() *TCellVisibility {
  output := &TCellVisibility{
    TStruct:thrift.NewTStruct("TCellVisibility", []thrift.TField{
    thrift.NewTField("expression", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *TCellVisibility) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "expression" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TCellVisibility) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadString()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(1, "expression", p.ThriftName(), err54); }
  p.Expression = v53
  return err
}

func (p *TCellVisibility) ReadFieldExpression(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TCellVisibility) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TCellVisibility")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TCellVisibility) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("expression", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "expression", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Expression))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "expression", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "expression", p.ThriftName(), err); }
  return err
}

func (p *TCellVisibility) WriteFieldExpression(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TCellVisibility) TStructName() string {
  return "TCellVisibility"
}

func (p *TCellVisibility) ThriftName() string {
  return "TCellVisibility"
}

func (p *TCellVisibility) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCellVisibility(%+v)", *p)
}

func (p *TCellVisibility) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TCellVisibility)
  if !ok {
    return 0, false
  }
  if p.Expression != data.Expression {
    if p.Expression < data.Expression {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TCellVisibility) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Expression
  }
  return nil
}

func (p *TCellVisibility) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("expression", thrift.STRING, 1),
    })
}

/**
 * Used to perform Get operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families.
 * 
 * To get everything for a row, instantiate a Get object with just the row to get.
 * To further define the scope of what to get you can add a timestamp or time range
 * with an optional maximum number of versions to return.
 * 
 * If you specify a time range and a timestamp the range is ignored.
 * Timestamps on TColumns are ignored.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 *  - Timestamp
 *  - TimeRange
 *  - MaxVersions
 *  - FilterString
 *  - Attributes
 *  - Authorizations
 */
type TGet struct {
  thrift.TStruct
  Row string "row"; // 1
  Columns thrift.TList "columns"; // 2
  Timestamp int64 "timestamp"; // 3
  TimeRange *TTimeRange "timeRange"; // 4
  MaxVersions int32 "maxVersions"; // 5
  FilterString string "filterString"; // 6
  Attributes thrift.TMap "attributes"; // 7
  Authorizations *TAuthorization "authorizations"; // 8
}

func NewTGet() *TGet {
  output := &TGet{
    TStruct:thrift.NewTStruct("TGet", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("timeRange", thrift.STRUCT, 4),
    thrift.NewTField("maxVersions", thrift.I32, 5),
    thrift.NewTField("filterString", thrift.STRING, 6),
    thrift.NewTField("attributes", thrift.MAP, 7),
    thrift.NewTField("authorizations", thrift.STRUCT, 8),
    }),
  }
  {
  }
  return output
}

func (p *TGet) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timeRange" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "maxVersions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "filterString" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "authorizations" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TGet) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v55, err56 := iprot.ReadString()
  if err56 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err56); }
  p.Row = v55
  return err
}

func (p *TGet) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TGet) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype62, _size59, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype62, _size59)
  for _i63:= 0; _i63 < _size59; _i63++ {
    _elem64 := NewTColumn()
    err67 := _elem64.Read(iprot)
    if err67 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem64TColumn", err67); }
    p.Columns.Push(_elem64)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TGet) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TGet) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v68, err69 := iprot.ReadI64()
  if err69 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err69); }
  p.Timestamp = v68
  return err
}

func (p *TGet) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TGet) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.TimeRange = NewTTimeRange()
  err72 := p.TimeRange.Read(iprot)
  if err72 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TimeRangeTTimeRange", err72); }
  return err
}

func (p *TGet) ReadFieldTimeRange(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TGet) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v73, err74 := iprot.ReadI32()
  if err74 != nil { return thrift.NewTProtocolExceptionReadField(5, "maxVersions", p.ThriftName(), err74); }
  p.MaxVersions = v73
  return err
}

func (p *TGet) ReadFieldMaxVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TGet) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v75, err76 := iprot.ReadString()
  if err76 != nil { return thrift.NewTProtocolExceptionReadField(6, "filterString", p.ThriftName(), err76); }
  p.FilterString = v75
  return err
}

func (p *TGet) ReadFieldFilterString(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TGet) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype80, _vtype81, _size79, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype80, _vtype81, _size79)
  for _i83:= 0; _i83 < _size79; _i83++ {
    v86, err87 := iprot.ReadString()
    if err87 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key84", "", err87); }
    _key84 := v86
    v88, err89 := iprot.ReadString()
    if err89 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val85", "", err89); }
    _val85 := v88
    p.Attributes.Set(_key84, _val85)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TGet) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *TGet) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Authorizations = NewTAuthorization()
  err92 := p.Authorizations.Read(iprot)
  if err92 != nil { return thrift.NewTProtocolExceptionReadStruct("p.AuthorizationsTAuthorization", err92); }
  return err
}

func (p *TGet) ReadFieldAuthorizations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *TGet) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TGet")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TGet) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TGet) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TGet) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter93 := range p.Columns.Iter() {
      Iter94 := Iter93.(*TColumn)
      err = Iter94.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumn", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TGet) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TGet) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TGet) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TGet) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TimeRange != nil {
    err = oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timeRange", p.ThriftName(), err); }
    err = p.TimeRange.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TTimeRange", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timeRange", p.ThriftName(), err); }
  }
  return err
}

func (p *TGet) WriteFieldTimeRange(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TGet) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxVersions", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MaxVersions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  return err
}

func (p *TGet) WriteFieldMaxVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TGet) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("filterString", thrift.STRING, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.FilterString))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err); }
  return err
}

func (p *TGet) WriteFieldFilterString(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TGet) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter95 := range p.Attributes.Iter() {
      Kiter96, Viter97 := Miter95.Key().(string), Miter95.Value().(string)
      err = oprot.WriteString(string(Kiter96))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter96", "", err); }
      err = oprot.WriteString(string(Viter97))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter97", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TGet) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *TGet) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Authorizations != nil {
    err = oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "authorizations", p.ThriftName(), err); }
    err = p.Authorizations.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TAuthorization", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "authorizations", p.ThriftName(), err); }
  }
  return err
}

func (p *TGet) WriteFieldAuthorizations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *TGet) TStructName() string {
  return "TGet"
}

func (p *TGet) ThriftName() string {
  return "TGet"
}

func (p *TGet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGet(%+v)", *p)
}

func (p *TGet) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TGet)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.TimeRange.CompareTo(data.TimeRange); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.MaxVersions != data.MaxVersions {
    if p.MaxVersions < data.MaxVersions {
      return -1, true
    }
    return 1, true
  }
  if p.FilterString != data.FilterString {
    if p.FilterString < data.FilterString {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Authorizations.CompareTo(data.Authorizations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TGet) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Columns
  case 3: return p.Timestamp
  case 4: return p.TimeRange
  case 5: return p.MaxVersions
  case 6: return p.FilterString
  case 7: return p.Attributes
  case 8: return p.Authorizations
  }
  return nil
}

func (p *TGet) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("timeRange", thrift.STRUCT, 4),
    thrift.NewTField("maxVersions", thrift.I32, 5),
    thrift.NewTField("filterString", thrift.STRING, 6),
    thrift.NewTField("attributes", thrift.MAP, 7),
    thrift.NewTField("authorizations", thrift.STRUCT, 8),
    })
}

/**
 * Used to perform Put operations for a single row.
 * 
 * Add column values to this object and they'll be added.
 * You can provide a default timestamp if the column values
 * don't have one. If you don't provide a default timestamp
 * the current time is inserted.
 * 
 * You can specify how this Put should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 * 
 * Attributes:
 *  - Row
 *  - ColumnValues
 *  - Timestamp
 *  - Attributes
 *  - Durability
 *  - CellVisibility
 */
type TPut struct {
  thrift.TStruct
  Row string "row"; // 1
  ColumnValues thrift.TList "columnValues"; // 2
  Timestamp int64 "timestamp"; // 3
  _ interface{} "attributes"; // nil # 4
  Attributes thrift.TMap "attributes"; // 5
  Durability TDurability "durability"; // 6
  CellVisibility *TCellVisibility "cellVisibility"; // 7
}

func NewTPut() *TPut {
  output := &TPut{
    TStruct:thrift.NewTStruct("TPut", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columnValues", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("attributes", thrift.MAP, 5),
    thrift.NewTField("durability", thrift.I32, 6),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 7),
    }),
  }
  {
  }
  return output
}

func (p *TPut) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columnValues" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "durability" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "cellVisibility" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TPut) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v98, err99 := iprot.ReadString()
  if err99 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err99); }
  p.Row = v98
  return err
}

func (p *TPut) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TPut) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype105, _size102, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnValues", "", err)
  }
  p.ColumnValues = thrift.NewTList(_etype105, _size102)
  for _i106:= 0; _i106 < _size102; _i106++ {
    _elem107 := NewTColumnValue()
    err110 := _elem107.Read(iprot)
    if err110 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem107TColumnValue", err110); }
    p.ColumnValues.Push(_elem107)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TPut) ReadFieldColumnValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TPut) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v111, err112 := iprot.ReadI64()
  if err112 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err112); }
  p.Timestamp = v111
  return err
}

func (p *TPut) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TPut) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype116, _vtype117, _size115, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype116, _vtype117, _size115)
  for _i119:= 0; _i119 < _size115; _i119++ {
    v122, err123 := iprot.ReadString()
    if err123 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key120", "", err123); }
    _key120 := v122
    v124, err125 := iprot.ReadString()
    if err125 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val121", "", err125); }
    _val121 := v124
    p.Attributes.Set(_key120, _val121)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TPut) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TPut) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v126, err127 := iprot.ReadI32()
  if err127 != nil { return thrift.NewTProtocolExceptionReadField(6, "durability", p.ThriftName(), err127); }
  p.Durability = TDurability(v126)
  return err
}

func (p *TPut) ReadFieldDurability(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TPut) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CellVisibility = NewTCellVisibility()
  err130 := p.CellVisibility.Read(iprot)
  if err130 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CellVisibilityTCellVisibility", err130); }
  return err
}

func (p *TPut) ReadFieldCellVisibility(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *TPut) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TPut")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TPut) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TPut) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TPut) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ColumnValues != nil {
    err = oprot.WriteFieldBegin("columnValues", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnValues", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.ColumnValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter131 := range p.ColumnValues.Iter() {
      Iter132 := Iter131.(*TColumnValue)
      err = Iter132.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumnValue", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnValues", p.ThriftName(), err); }
  }
  return err
}

func (p *TPut) WriteFieldColumnValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TPut) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TPut) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TPut) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter133 := range p.Attributes.Iter() {
      Kiter134, Viter135 := Miter133.Key().(string), Miter133.Value().(string)
      err = oprot.WriteString(string(Kiter134))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter134", "", err); }
      err = oprot.WriteString(string(Viter135))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter135", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TPut) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TPut) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("durability", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "durability", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Durability))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "durability", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "durability", p.ThriftName(), err); }
  return err
}

func (p *TPut) WriteFieldDurability(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TPut) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CellVisibility != nil {
    err = oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "cellVisibility", p.ThriftName(), err); }
    err = p.CellVisibility.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCellVisibility", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "cellVisibility", p.ThriftName(), err); }
  }
  return err
}

func (p *TPut) WriteFieldCellVisibility(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *TPut) TStructName() string {
  return "TPut"
}

func (p *TPut) ThriftName() string {
  return "TPut"
}

func (p *TPut) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPut(%+v)", *p)
}

func (p *TPut) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TPut)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ColumnValues.CompareTo(data.ColumnValues); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Durability != data.Durability {
    if p.Durability < data.Durability {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CellVisibility.CompareTo(data.CellVisibility); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TPut) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.ColumnValues
  case 3: return p.Timestamp
  case 5: return p.Attributes
  case 6: return p.Durability
  case 7: return p.CellVisibility
  }
  return nil
}

func (p *TPut) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columnValues", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("attributes", thrift.MAP, 5),
    thrift.NewTField("durability", thrift.I32, 6),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 7),
    })
}

/**
 * Used to perform Delete operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families as TColumns.
 * 
 * Specifying only a family in a TColumn will delete the whole family.
 * If a timestamp is specified all versions with a timestamp less than
 * or equal to this will be deleted. If no timestamp is specified the
 * current time will be used.
 * 
 * Specifying a family and a column qualifier in a TColumn will delete only
 * this qualifier. If a timestamp is specified only versions equal
 * to this timestamp will be deleted. If no timestamp is specified the
 * most recent version will be deleted.  To delete all previous versions,
 * specify the DELETE_COLUMNS TDeleteType.
 * 
 * The top level timestamp is only used if a complete row should be deleted
 * (i.e. no columns are passed) and if it is specified it works the same way
 * as if you had added a TColumn for every column family and this timestamp
 * (i.e. all versions older than or equal in all column families will be deleted)
 * 
 * You can specify how this Delete should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 *  - Timestamp
 *  - DeleteType
 *  - Attributes
 *  - Durability
 */
type TDelete struct {
  thrift.TStruct
  Row string "row"; // 1
  Columns thrift.TList "columns"; // 2
  Timestamp int64 "timestamp"; // 3
  DeleteType TDeleteType "deleteType"; // 4
  _ interface{} "attributes"; // nil # 5
  Attributes thrift.TMap "attributes"; // 6
  Durability TDurability "durability"; // 7
}

func NewTDelete() *TDelete {
  output := &TDelete{
    TStruct:thrift.NewTStruct("TDelete", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("deleteType", thrift.I32, 4),
    thrift.NewTField("attributes", thrift.MAP, 6),
    thrift.NewTField("durability", thrift.I32, 7),
    }),
  }
  {
    output.DeleteType =     1
  }
  return output
}

func (p *TDelete) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "deleteType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "durability" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TDelete) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v136, err137 := iprot.ReadString()
  if err137 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err137); }
  p.Row = v136
  return err
}

func (p *TDelete) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TDelete) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype143, _size140, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype143, _size140)
  for _i144:= 0; _i144 < _size140; _i144++ {
    _elem145 := NewTColumn()
    err148 := _elem145.Read(iprot)
    if err148 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem145TColumn", err148); }
    p.Columns.Push(_elem145)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TDelete) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TDelete) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v149, err150 := iprot.ReadI64()
  if err150 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err150); }
  p.Timestamp = v149
  return err
}

func (p *TDelete) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TDelete) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v151, err152 := iprot.ReadI32()
  if err152 != nil { return thrift.NewTProtocolExceptionReadField(4, "deleteType", p.ThriftName(), err152); }
  p.DeleteType = TDeleteType(v151)
  return err
}

func (p *TDelete) ReadFieldDeleteType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TDelete) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype156, _vtype157, _size155, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype156, _vtype157, _size155)
  for _i159:= 0; _i159 < _size155; _i159++ {
    v162, err163 := iprot.ReadString()
    if err163 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key160", "", err163); }
    _key160 := v162
    v164, err165 := iprot.ReadString()
    if err165 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val161", "", err165); }
    _val161 := v164
    p.Attributes.Set(_key160, _val161)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TDelete) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TDelete) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v166, err167 := iprot.ReadI32()
  if err167 != nil { return thrift.NewTProtocolExceptionReadField(7, "durability", p.ThriftName(), err167); }
  p.Durability = TDurability(v166)
  return err
}

func (p *TDelete) ReadFieldDurability(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *TDelete) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TDelete")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TDelete) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TDelete) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TDelete) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter168 := range p.Columns.Iter() {
      Iter169 := Iter168.(*TColumn)
      err = Iter169.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumn", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TDelete) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TDelete) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TDelete) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TDelete) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteType", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.DeleteType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteType", p.ThriftName(), err); }
  return err
}

func (p *TDelete) WriteFieldDeleteType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TDelete) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter170 := range p.Attributes.Iter() {
      Kiter171, Viter172 := Miter170.Key().(string), Miter170.Value().(string)
      err = oprot.WriteString(string(Kiter171))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter171", "", err); }
      err = oprot.WriteString(string(Viter172))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter172", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TDelete) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TDelete) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("durability", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "durability", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Durability))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "durability", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "durability", p.ThriftName(), err); }
  return err
}

func (p *TDelete) WriteFieldDurability(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *TDelete) TStructName() string {
  return "TDelete"
}

func (p *TDelete) ThriftName() string {
  return "TDelete"
}

func (p *TDelete) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDelete(%+v)", *p)
}

func (p *TDelete) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TDelete)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  if p.DeleteType != data.DeleteType {
    if p.DeleteType < data.DeleteType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Durability != data.Durability {
    if p.Durability < data.Durability {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TDelete) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Columns
  case 3: return p.Timestamp
  case 4: return p.DeleteType
  case 6: return p.Attributes
  case 7: return p.Durability
  }
  return nil
}

func (p *TDelete) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    thrift.NewTField("deleteType", thrift.I32, 4),
    thrift.NewTField("attributes", thrift.MAP, 6),
    thrift.NewTField("durability", thrift.I32, 7),
    })
}

/**
 * Used to perform Increment operations for a single row.
 * 
 * You can specify how this Increment should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 *  - Attributes
 *  - Durability
 *  - CellVisibility
 */
type TIncrement struct {
  thrift.TStruct
  Row string "row"; // 1
  Columns thrift.TList "columns"; // 2
  _ interface{} "attributes"; // nil # 3
  Attributes thrift.TMap "attributes"; // 4
  Durability TDurability "durability"; // 5
  CellVisibility *TCellVisibility "cellVisibility"; // 6
}

func NewTIncrement() *TIncrement {
  output := &TIncrement{
    TStruct:thrift.NewTStruct("TIncrement", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("attributes", thrift.MAP, 4),
    thrift.NewTField("durability", thrift.I32, 5),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 6),
    }),
  }
  {
  }
  return output
}

func (p *TIncrement) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "durability" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "cellVisibility" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v173, err174 := iprot.ReadString()
  if err174 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err174); }
  p.Row = v173
  return err
}

func (p *TIncrement) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype180, _size177, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype180, _size177)
  for _i181:= 0; _i181 < _size177; _i181++ {
    _elem182 := NewTColumnIncrement()
    err185 := _elem182.Read(iprot)
    if err185 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem182TColumnIncrement", err185); }
    p.Columns.Push(_elem182)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TIncrement) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TIncrement) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype189, _vtype190, _size188, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype189, _vtype190, _size188)
  for _i192:= 0; _i192 < _size188; _i192++ {
    v195, err196 := iprot.ReadString()
    if err196 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key193", "", err196); }
    _key193 := v195
    v197, err198 := iprot.ReadString()
    if err198 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val194", "", err198); }
    _val194 := v197
    p.Attributes.Set(_key193, _val194)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TIncrement) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TIncrement) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v199, err200 := iprot.ReadI32()
  if err200 != nil { return thrift.NewTProtocolExceptionReadField(5, "durability", p.ThriftName(), err200); }
  p.Durability = TDurability(v199)
  return err
}

func (p *TIncrement) ReadFieldDurability(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TIncrement) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CellVisibility = NewTCellVisibility()
  err203 := p.CellVisibility.Read(iprot)
  if err203 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CellVisibilityTCellVisibility", err203); }
  return err
}

func (p *TIncrement) ReadFieldCellVisibility(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TIncrement) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TIncrement")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TIncrement) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TIncrement) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TIncrement) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter204 := range p.Columns.Iter() {
      Iter205 := Iter204.(*TColumnIncrement)
      err = Iter205.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumnIncrement", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TIncrement) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TIncrement) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter206 := range p.Attributes.Iter() {
      Kiter207, Viter208 := Miter206.Key().(string), Miter206.Value().(string)
      err = oprot.WriteString(string(Kiter207))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter207", "", err); }
      err = oprot.WriteString(string(Viter208))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter208", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TIncrement) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TIncrement) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("durability", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "durability", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Durability))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "durability", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "durability", p.ThriftName(), err); }
  return err
}

func (p *TIncrement) WriteFieldDurability(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TIncrement) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CellVisibility != nil {
    err = oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "cellVisibility", p.ThriftName(), err); }
    err = p.CellVisibility.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCellVisibility", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "cellVisibility", p.ThriftName(), err); }
  }
  return err
}

func (p *TIncrement) WriteFieldCellVisibility(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TIncrement) TStructName() string {
  return "TIncrement"
}

func (p *TIncrement) ThriftName() string {
  return "TIncrement"
}

func (p *TIncrement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIncrement(%+v)", *p)
}

func (p *TIncrement) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TIncrement)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Durability != data.Durability {
    if p.Durability < data.Durability {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CellVisibility.CompareTo(data.CellVisibility); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TIncrement) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Columns
  case 4: return p.Attributes
  case 5: return p.Durability
  case 6: return p.CellVisibility
  }
  return nil
}

func (p *TIncrement) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("attributes", thrift.MAP, 4),
    thrift.NewTField("durability", thrift.I32, 5),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 6),
    })
}

/**
 * Attributes:
 *  - Row
 *  - Columns
 *  - Attributes
 *  - Durability
 *  - CellVisibility
 */
type TAppend struct {
  thrift.TStruct
  Row string "row"; // 1
  Columns thrift.TList "columns"; // 2
  Attributes thrift.TMap "attributes"; // 3
  Durability TDurability "durability"; // 4
  CellVisibility *TCellVisibility "cellVisibility"; // 5
}

func NewTAppend() *TAppend {
  output := &TAppend{
    TStruct:thrift.NewTStruct("TAppend", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("attributes", thrift.MAP, 3),
    thrift.NewTField("durability", thrift.I32, 4),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 5),
    }),
  }
  {
  }
  return output
}

func (p *TAppend) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "durability" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "cellVisibility" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TAppend) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v209, err210 := iprot.ReadString()
  if err210 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err210); }
  p.Row = v209
  return err
}

func (p *TAppend) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TAppend) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype216, _size213, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype216, _size213)
  for _i217:= 0; _i217 < _size213; _i217++ {
    _elem218 := NewTColumnValue()
    err221 := _elem218.Read(iprot)
    if err221 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem218TColumnValue", err221); }
    p.Columns.Push(_elem218)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TAppend) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TAppend) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype225, _vtype226, _size224, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype225, _vtype226, _size224)
  for _i228:= 0; _i228 < _size224; _i228++ {
    v231, err232 := iprot.ReadString()
    if err232 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key229", "", err232); }
    _key229 := v231
    v233, err234 := iprot.ReadString()
    if err234 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val230", "", err234); }
    _val230 := v233
    p.Attributes.Set(_key229, _val230)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TAppend) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TAppend) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v235, err236 := iprot.ReadI32()
  if err236 != nil { return thrift.NewTProtocolExceptionReadField(4, "durability", p.ThriftName(), err236); }
  p.Durability = TDurability(v235)
  return err
}

func (p *TAppend) ReadFieldDurability(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TAppend) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CellVisibility = NewTCellVisibility()
  err239 := p.CellVisibility.Read(iprot)
  if err239 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CellVisibilityTCellVisibility", err239); }
  return err
}

func (p *TAppend) ReadFieldCellVisibility(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TAppend) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TAppend")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TAppend) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TAppend) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TAppend) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter240 := range p.Columns.Iter() {
      Iter241 := Iter240.(*TColumnValue)
      err = Iter241.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumnValue", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TAppend) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TAppend) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter242 := range p.Attributes.Iter() {
      Kiter243, Viter244 := Miter242.Key().(string), Miter242.Value().(string)
      err = oprot.WriteString(string(Kiter243))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter243", "", err); }
      err = oprot.WriteString(string(Viter244))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter244", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TAppend) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TAppend) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("durability", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "durability", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Durability))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "durability", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "durability", p.ThriftName(), err); }
  return err
}

func (p *TAppend) WriteFieldDurability(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TAppend) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CellVisibility != nil {
    err = oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "cellVisibility", p.ThriftName(), err); }
    err = p.CellVisibility.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCellVisibility", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "cellVisibility", p.ThriftName(), err); }
  }
  return err
}

func (p *TAppend) WriteFieldCellVisibility(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TAppend) TStructName() string {
  return "TAppend"
}

func (p *TAppend) ThriftName() string {
  return "TAppend"
}

func (p *TAppend) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppend(%+v)", *p)
}

func (p *TAppend) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TAppend)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Durability != data.Durability {
    if p.Durability < data.Durability {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CellVisibility.CompareTo(data.CellVisibility); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TAppend) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Columns
  case 3: return p.Attributes
  case 4: return p.Durability
  case 5: return p.CellVisibility
  }
  return nil
}

func (p *TAppend) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.LIST, 2),
    thrift.NewTField("attributes", thrift.MAP, 3),
    thrift.NewTField("durability", thrift.I32, 4),
    thrift.NewTField("cellVisibility", thrift.STRUCT, 5),
    })
}

/**
 * Any timestamps in the columns are ignored, use timeRange to select by timestamp.
 * Max versions defaults to 1.
 * 
 * Attributes:
 *  - StartRow
 *  - StopRow
 *  - Columns
 *  - Caching
 *  - MaxVersions
 *  - TimeRange
 *  - FilterString
 *  - BatchSize
 *  - Attributes
 *  - Authorizations
 *  - Reversed
 */
type TScan struct {
  thrift.TStruct
  StartRow string "startRow"; // 1
  StopRow string "stopRow"; // 2
  Columns thrift.TList "columns"; // 3
  Caching int32 "caching"; // 4
  MaxVersions int32 "maxVersions"; // 5
  TimeRange *TTimeRange "timeRange"; // 6
  FilterString string "filterString"; // 7
  BatchSize int32 "batchSize"; // 8
  Attributes thrift.TMap "attributes"; // 9
  Authorizations *TAuthorization "authorizations"; // 10
  Reversed bool "reversed"; // 11
}

func NewTScan() *TScan {
  output := &TScan{
    TStruct:thrift.NewTStruct("TScan", []thrift.TField{
    thrift.NewTField("startRow", thrift.STRING, 1),
    thrift.NewTField("stopRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("caching", thrift.I32, 4),
    thrift.NewTField("maxVersions", thrift.I32, 5),
    thrift.NewTField("timeRange", thrift.STRUCT, 6),
    thrift.NewTField("filterString", thrift.STRING, 7),
    thrift.NewTField("batchSize", thrift.I32, 8),
    thrift.NewTField("attributes", thrift.MAP, 9),
    thrift.NewTField("authorizations", thrift.STRUCT, 10),
    thrift.NewTField("reversed", thrift.BOOL, 11),
    }),
  }
  {
    output.MaxVersions = 1
  }
  return output
}

func (p *TScan) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "startRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "stopRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "caching" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "maxVersions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "timeRange" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "filterString" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "batchSize" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "attributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "authorizations" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "reversed" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v245, err246 := iprot.ReadString()
  if err246 != nil { return thrift.NewTProtocolExceptionReadField(1, "startRow", p.ThriftName(), err246); }
  p.StartRow = v245
  return err
}

func (p *TScan) ReadFieldStartRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v247, err248 := iprot.ReadString()
  if err248 != nil { return thrift.NewTProtocolExceptionReadField(2, "stopRow", p.ThriftName(), err248); }
  p.StopRow = v247
  return err
}

func (p *TScan) ReadFieldStopRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype254, _size251, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype254, _size251)
  for _i255:= 0; _i255 < _size251; _i255++ {
    _elem256 := NewTColumn()
    err259 := _elem256.Read(iprot)
    if err259 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem256TColumn", err259); }
    p.Columns.Push(_elem256)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TScan) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v260, err261 := iprot.ReadI32()
  if err261 != nil { return thrift.NewTProtocolExceptionReadField(4, "caching", p.ThriftName(), err261); }
  p.Caching = v260
  return err
}

func (p *TScan) ReadFieldCaching(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v262, err263 := iprot.ReadI32()
  if err263 != nil { return thrift.NewTProtocolExceptionReadField(5, "maxVersions", p.ThriftName(), err263); }
  p.MaxVersions = v262
  return err
}

func (p *TScan) ReadFieldMaxVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.TimeRange = NewTTimeRange()
  err266 := p.TimeRange.Read(iprot)
  if err266 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TimeRangeTTimeRange", err266); }
  return err
}

func (p *TScan) ReadFieldTimeRange(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TScan) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v267, err268 := iprot.ReadString()
  if err268 != nil { return thrift.NewTProtocolExceptionReadField(7, "filterString", p.ThriftName(), err268); }
  p.FilterString = v267
  return err
}

func (p *TScan) ReadFieldFilterString(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *TScan) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v269, err270 := iprot.ReadI32()
  if err270 != nil { return thrift.NewTProtocolExceptionReadField(8, "batchSize", p.ThriftName(), err270); }
  p.BatchSize = v269
  return err
}

func (p *TScan) ReadFieldBatchSize(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *TScan) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype274, _vtype275, _size273, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
  }
  p.Attributes = thrift.NewTMap(_ktype274, _vtype275, _size273)
  for _i277:= 0; _i277 < _size273; _i277++ {
    v280, err281 := iprot.ReadString()
    if err281 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key278", "", err281); }
    _key278 := v280
    v282, err283 := iprot.ReadString()
    if err283 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val279", "", err283); }
    _val279 := v282
    p.Attributes.Set(_key278, _val279)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TScan) ReadFieldAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *TScan) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Authorizations = NewTAuthorization()
  err286 := p.Authorizations.Read(iprot)
  if err286 != nil { return thrift.NewTProtocolExceptionReadStruct("p.AuthorizationsTAuthorization", err286); }
  return err
}

func (p *TScan) ReadFieldAuthorizations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *TScan) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v287, err288 := iprot.ReadBool()
  if err288 != nil { return thrift.NewTProtocolExceptionReadField(11, "reversed", p.ThriftName(), err288); }
  p.Reversed = v287
  return err
}

func (p *TScan) ReadFieldReversed(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *TScan) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TScan")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("startRow", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldStartRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TScan) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StopRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldStopRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TScan) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter289 := range p.Columns.Iter() {
      Iter290 := Iter289.(*TColumn)
      err = Iter290.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TColumn", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TScan) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TScan) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("caching", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "caching", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Caching))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "caching", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "caching", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldCaching(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TScan) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxVersions", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MaxVersions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersions", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldMaxVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TScan) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TimeRange != nil {
    err = oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "timeRange", p.ThriftName(), err); }
    err = p.TimeRange.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TTimeRange", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "timeRange", p.ThriftName(), err); }
  }
  return err
}

func (p *TScan) WriteFieldTimeRange(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TScan) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("filterString", thrift.STRING, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "filterString", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.FilterString))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "filterString", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "filterString", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldFilterString(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *TScan) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("batchSize", thrift.I32, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "batchSize", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.BatchSize))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "batchSize", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "batchSize", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldBatchSize(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *TScan) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Attributes != nil {
    err = oprot.WriteFieldBegin("attributes", thrift.MAP, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "attributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Attributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter291 := range p.Attributes.Iter() {
      Kiter292, Viter293 := Miter291.Key().(string), Miter291.Value().(string)
      err = oprot.WriteString(string(Kiter292))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter292", "", err); }
      err = oprot.WriteString(string(Viter293))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter293", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "attributes", p.ThriftName(), err); }
  }
  return err
}

func (p *TScan) WriteFieldAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *TScan) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Authorizations != nil {
    err = oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 10)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "authorizations", p.ThriftName(), err); }
    err = p.Authorizations.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TAuthorization", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "authorizations", p.ThriftName(), err); }
  }
  return err
}

func (p *TScan) WriteFieldAuthorizations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *TScan) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("reversed", thrift.BOOL, 11)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "reversed", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Reversed))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "reversed", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "reversed", p.ThriftName(), err); }
  return err
}

func (p *TScan) WriteFieldReversed(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *TScan) TStructName() string {
  return "TScan"
}

func (p *TScan) ThriftName() string {
  return "TScan"
}

func (p *TScan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TScan(%+v)", *p)
}

func (p *TScan) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TScan)
  if !ok {
    return 0, false
  }
  if p.StartRow != data.StartRow {
    if p.StartRow < data.StartRow {
      return -1, true
    }
    return 1, true
  }
  if p.StopRow != data.StopRow {
    if p.StopRow < data.StopRow {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Caching != data.Caching {
    if p.Caching < data.Caching {
      return -1, true
    }
    return 1, true
  }
  if p.MaxVersions != data.MaxVersions {
    if p.MaxVersions < data.MaxVersions {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.TimeRange.CompareTo(data.TimeRange); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.FilterString != data.FilterString {
    if p.FilterString < data.FilterString {
      return -1, true
    }
    return 1, true
  }
  if p.BatchSize != data.BatchSize {
    if p.BatchSize < data.BatchSize {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Attributes.CompareTo(data.Attributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Authorizations.CompareTo(data.Authorizations); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Reversed, data.Reversed); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *TScan) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.StartRow
  case 2: return p.StopRow
  case 3: return p.Columns
  case 4: return p.Caching
  case 5: return p.MaxVersions
  case 6: return p.TimeRange
  case 7: return p.FilterString
  case 8: return p.BatchSize
  case 9: return p.Attributes
  case 10: return p.Authorizations
  case 11: return p.Reversed
  }
  return nil
}

func (p *TScan) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("startRow", thrift.STRING, 1),
    thrift.NewTField("stopRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("caching", thrift.I32, 4),
    thrift.NewTField("maxVersions", thrift.I32, 5),
    thrift.NewTField("timeRange", thrift.STRUCT, 6),
    thrift.NewTField("filterString", thrift.STRING, 7),
    thrift.NewTField("batchSize", thrift.I32, 8),
    thrift.NewTField("attributes", thrift.MAP, 9),
    thrift.NewTField("authorizations", thrift.STRUCT, 10),
    thrift.NewTField("reversed", thrift.BOOL, 11),
    })
}

/**
 * Atomic mutation for the specified row. It can be either Put or Delete.
 * 
 * Attributes:
 *  - Put
 *  - DeleteSingle
 */
type TMutation struct {
  thrift.TStruct
  Put *TPut "put"; // 1
  DeleteSingle *TDelete "deleteSingle"; // 2
}

func NewTMutation() *TMutation {
  output := &TMutation{
    TStruct:thrift.NewTStruct("TMutation", []thrift.TField{
    thrift.NewTField("put", thrift.STRUCT, 1),
    thrift.NewTField("deleteSingle", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *TMutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "put" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "deleteSingle" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TMutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Put = NewTPut()
  err296 := p.Put.Read(iprot)
  if err296 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PutTPut", err296); }
  return err
}

func (p *TMutation) ReadFieldPut(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TMutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.DeleteSingle = NewTDelete()
  err299 := p.DeleteSingle.Read(iprot)
  if err299 != nil { return thrift.NewTProtocolExceptionReadStruct("p.DeleteSingleTDelete", err299); }
  return err
}

func (p *TMutation) ReadFieldDeleteSingle(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TMutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TMutation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TMutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Put != nil {
    err = oprot.WriteFieldBegin("put", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "put", p.ThriftName(), err); }
    err = p.Put.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TPut", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "put", p.ThriftName(), err); }
  }
  return err
}

func (p *TMutation) WriteFieldPut(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TMutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.DeleteSingle != nil {
    err = oprot.WriteFieldBegin("deleteSingle", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deleteSingle", p.ThriftName(), err); }
    err = p.DeleteSingle.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TDelete", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deleteSingle", p.ThriftName(), err); }
  }
  return err
}

func (p *TMutation) WriteFieldDeleteSingle(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TMutation) TStructName() string {
  return "TMutation"
}

func (p *TMutation) ThriftName() string {
  return "TMutation"
}

func (p *TMutation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMutation(%+v)", *p)
}

func (p *TMutation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TMutation)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Put.CompareTo(data.Put); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.DeleteSingle.CompareTo(data.DeleteSingle); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TMutation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Put
  case 2: return p.DeleteSingle
  }
  return nil
}

func (p *TMutation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("put", thrift.STRUCT, 1),
    thrift.NewTField("deleteSingle", thrift.STRUCT, 2),
    })
}

/**
 * A TRowMutations object is used to apply a number of Mutations to a single row.
 * 
 * Attributes:
 *  - Row
 *  - Mutations
 */
type TRowMutations struct {
  thrift.TStruct
  Row string "row"; // 1
  Mutations thrift.TList "mutations"; // 2
}

func NewTRowMutations() *TRowMutations {
  output := &TRowMutations{
    TStruct:thrift.NewTStruct("TRowMutations", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("mutations", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *TRowMutations) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "mutations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TRowMutations) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v300, err301 := iprot.ReadString()
  if err301 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err301); }
  p.Row = v300
  return err
}

func (p *TRowMutations) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TRowMutations) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype307, _size304, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
  }
  p.Mutations = thrift.NewTList(_etype307, _size304)
  for _i308:= 0; _i308 < _size304; _i308++ {
    _elem309 := NewTMutation()
    err312 := _elem309.Read(iprot)
    if err312 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem309TMutation", err312); }
    p.Mutations.Push(_elem309)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *TRowMutations) ReadFieldMutations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TRowMutations) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TRowMutations")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TRowMutations) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TRowMutations) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TRowMutations) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Mutations != nil {
    err = oprot.WriteFieldBegin("mutations", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter313 := range p.Mutations.Iter() {
      Iter314 := Iter313.(*TMutation)
      err = Iter314.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TMutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err); }
  }
  return err
}

func (p *TRowMutations) WriteFieldMutations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TRowMutations) TStructName() string {
  return "TRowMutations"
}

func (p *TRowMutations) ThriftName() string {
  return "TRowMutations"
}

func (p *TRowMutations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRowMutations(%+v)", *p)
}

func (p *TRowMutations) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TRowMutations)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Mutations.CompareTo(data.Mutations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TRowMutations) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Mutations
  }
  return nil
}

func (p *TRowMutations) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("mutations", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - RegionId
 *  - TableName
 *  - StartKey
 *  - EndKey
 *  - Offline
 *  - Split
 *  - ReplicaId
 */
type THRegionInfo struct {
  thrift.TStruct
  RegionId int64 "regionId"; // 1
  TableName string "tableName"; // 2
  StartKey string "startKey"; // 3
  EndKey string "endKey"; // 4
  Offline bool "offline"; // 5
  Split bool "split"; // 6
  ReplicaId int32 "replicaId"; // 7
}

func NewTHRegionInfo() *THRegionInfo {
  output := &THRegionInfo{
    TStruct:thrift.NewTStruct("THRegionInfo", []thrift.TField{
    thrift.NewTField("regionId", thrift.I64, 1),
    thrift.NewTField("tableName", thrift.STRING, 2),
    thrift.NewTField("startKey", thrift.STRING, 3),
    thrift.NewTField("endKey", thrift.STRING, 4),
    thrift.NewTField("offline", thrift.BOOL, 5),
    thrift.NewTField("split", thrift.BOOL, 6),
    thrift.NewTField("replicaId", thrift.I32, 7),
    }),
  }
  {
  }
  return output
}

func (p *THRegionInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "regionId" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "startKey" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "endKey" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "offline" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "split" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "replicaId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v315, err316 := iprot.ReadI64()
  if err316 != nil { return thrift.NewTProtocolExceptionReadField(1, "regionId", p.ThriftName(), err316); }
  p.RegionId = v315
  return err
}

func (p *THRegionInfo) ReadFieldRegionId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *THRegionInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v317, err318 := iprot.ReadString()
  if err318 != nil { return thrift.NewTProtocolExceptionReadField(2, "tableName", p.ThriftName(), err318); }
  p.TableName = v317
  return err
}

func (p *THRegionInfo) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *THRegionInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v319, err320 := iprot.ReadString()
  if err320 != nil { return thrift.NewTProtocolExceptionReadField(3, "startKey", p.ThriftName(), err320); }
  p.StartKey = v319
  return err
}

func (p *THRegionInfo) ReadFieldStartKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *THRegionInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v321, err322 := iprot.ReadString()
  if err322 != nil { return thrift.NewTProtocolExceptionReadField(4, "endKey", p.ThriftName(), err322); }
  p.EndKey = v321
  return err
}

func (p *THRegionInfo) ReadFieldEndKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *THRegionInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v323, err324 := iprot.ReadBool()
  if err324 != nil { return thrift.NewTProtocolExceptionReadField(5, "offline", p.ThriftName(), err324); }
  p.Offline = v323
  return err
}

func (p *THRegionInfo) ReadFieldOffline(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *THRegionInfo) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v325, err326 := iprot.ReadBool()
  if err326 != nil { return thrift.NewTProtocolExceptionReadField(6, "split", p.ThriftName(), err326); }
  p.Split = v325
  return err
}

func (p *THRegionInfo) ReadFieldSplit(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *THRegionInfo) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v327, err328 := iprot.ReadI32()
  if err328 != nil { return thrift.NewTProtocolExceptionReadField(7, "replicaId", p.ThriftName(), err328); }
  p.ReplicaId = v327
  return err
}

func (p *THRegionInfo) ReadFieldReplicaId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *THRegionInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("THRegionInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("regionId", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "regionId", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.RegionId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "regionId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "regionId", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldRegionId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *THRegionInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tableName", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *THRegionInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("startKey", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startKey", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartKey))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startKey", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startKey", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldStartKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *THRegionInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("endKey", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "endKey", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.EndKey))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "endKey", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "endKey", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldEndKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *THRegionInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("offline", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "offline", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Offline))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "offline", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "offline", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldOffline(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *THRegionInfo) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("split", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "split", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Split))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "split", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "split", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldSplit(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *THRegionInfo) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("replicaId", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "replicaId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ReplicaId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "replicaId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "replicaId", p.ThriftName(), err); }
  return err
}

func (p *THRegionInfo) WriteFieldReplicaId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *THRegionInfo) TStructName() string {
  return "THRegionInfo"
}

func (p *THRegionInfo) ThriftName() string {
  return "THRegionInfo"
}

func (p *THRegionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THRegionInfo(%+v)", *p)
}

func (p *THRegionInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*THRegionInfo)
  if !ok {
    return 0, false
  }
  if p.RegionId != data.RegionId {
    if p.RegionId < data.RegionId {
      return -1, true
    }
    return 1, true
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartKey != data.StartKey {
    if p.StartKey < data.StartKey {
      return -1, true
    }
    return 1, true
  }
  if p.EndKey != data.EndKey {
    if p.EndKey < data.EndKey {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.Offline, data.Offline); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Split, data.Split); cmp != 0 {
    return cmp, true
  }
  if p.ReplicaId != data.ReplicaId {
    if p.ReplicaId < data.ReplicaId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *THRegionInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RegionId
  case 2: return p.TableName
  case 3: return p.StartKey
  case 4: return p.EndKey
  case 5: return p.Offline
  case 6: return p.Split
  case 7: return p.ReplicaId
  }
  return nil
}

func (p *THRegionInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("regionId", thrift.I64, 1),
    thrift.NewTField("tableName", thrift.STRING, 2),
    thrift.NewTField("startKey", thrift.STRING, 3),
    thrift.NewTField("endKey", thrift.STRING, 4),
    thrift.NewTField("offline", thrift.BOOL, 5),
    thrift.NewTField("split", thrift.BOOL, 6),
    thrift.NewTField("replicaId", thrift.I32, 7),
    })
}

/**
 * Attributes:
 *  - HostName
 *  - Port
 *  - StartCode
 */
type TServerName struct {
  thrift.TStruct
  HostName string "hostName"; // 1
  Port int32 "port"; // 2
  StartCode int64 "startCode"; // 3
}

func NewTServerName() *TServerName {
  output := &TServerName{
    TStruct:thrift.NewTStruct("TServerName", []thrift.TField{
    thrift.NewTField("hostName", thrift.STRING, 1),
    thrift.NewTField("port", thrift.I32, 2),
    thrift.NewTField("startCode", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *TServerName) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "hostName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "port" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "startCode" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TServerName) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v329, err330 := iprot.ReadString()
  if err330 != nil { return thrift.NewTProtocolExceptionReadField(1, "hostName", p.ThriftName(), err330); }
  p.HostName = v329
  return err
}

func (p *TServerName) ReadFieldHostName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TServerName) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v331, err332 := iprot.ReadI32()
  if err332 != nil { return thrift.NewTProtocolExceptionReadField(2, "port", p.ThriftName(), err332); }
  p.Port = v331
  return err
}

func (p *TServerName) ReadFieldPort(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TServerName) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v333, err334 := iprot.ReadI64()
  if err334 != nil { return thrift.NewTProtocolExceptionReadField(3, "startCode", p.ThriftName(), err334); }
  p.StartCode = v333
  return err
}

func (p *TServerName) ReadFieldStartCode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TServerName) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TServerName")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TServerName) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("hostName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hostName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.HostName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hostName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hostName", p.ThriftName(), err); }
  return err
}

func (p *TServerName) WriteFieldHostName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TServerName) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("port", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Port))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  return err
}

func (p *TServerName) WriteFieldPort(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TServerName) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("startCode", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startCode", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.StartCode))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startCode", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startCode", p.ThriftName(), err); }
  return err
}

func (p *TServerName) WriteFieldStartCode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TServerName) TStructName() string {
  return "TServerName"
}

func (p *TServerName) ThriftName() string {
  return "TServerName"
}

func (p *TServerName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerName(%+v)", *p)
}

func (p *TServerName) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TServerName)
  if !ok {
    return 0, false
  }
  if p.HostName != data.HostName {
    if p.HostName < data.HostName {
      return -1, true
    }
    return 1, true
  }
  if p.Port != data.Port {
    if p.Port < data.Port {
      return -1, true
    }
    return 1, true
  }
  if p.StartCode != data.StartCode {
    if p.StartCode < data.StartCode {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TServerName) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.HostName
  case 2: return p.Port
  case 3: return p.StartCode
  }
  return nil
}

func (p *TServerName) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("hostName", thrift.STRING, 1),
    thrift.NewTField("port", thrift.I32, 2),
    thrift.NewTField("startCode", thrift.I64, 3),
    })
}

/**
 * Attributes:
 *  - ServerName
 *  - RegionInfo
 */
type THRegionLocation struct {
  thrift.TStruct
  ServerName *TServerName "serverName"; // 1
  RegionInfo *THRegionInfo "regionInfo"; // 2
}

func NewTHRegionLocation() *THRegionLocation {
  output := &THRegionLocation{
    TStruct:thrift.NewTStruct("THRegionLocation", []thrift.TField{
    thrift.NewTField("serverName", thrift.STRUCT, 1),
    thrift.NewTField("regionInfo", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *THRegionLocation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "serverName" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "regionInfo" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *THRegionLocation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ServerName = NewTServerName()
  err337 := p.ServerName.Read(iprot)
  if err337 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ServerNameTServerName", err337); }
  return err
}

func (p *THRegionLocation) ReadFieldServerName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *THRegionLocation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.RegionInfo = NewTHRegionInfo()
  err340 := p.RegionInfo.Read(iprot)
  if err340 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RegionInfoTHRegionInfo", err340); }
  return err
}

func (p *THRegionLocation) ReadFieldRegionInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *THRegionLocation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("THRegionLocation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *THRegionLocation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ServerName != nil {
    err = oprot.WriteFieldBegin("serverName", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverName", p.ThriftName(), err); }
    err = p.ServerName.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TServerName", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverName", p.ThriftName(), err); }
  }
  return err
}

func (p *THRegionLocation) WriteFieldServerName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *THRegionLocation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RegionInfo != nil {
    err = oprot.WriteFieldBegin("regionInfo", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "regionInfo", p.ThriftName(), err); }
    err = p.RegionInfo.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("THRegionInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "regionInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *THRegionLocation) WriteFieldRegionInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *THRegionLocation) TStructName() string {
  return "THRegionLocation"
}

func (p *THRegionLocation) ThriftName() string {
  return "THRegionLocation"
}

func (p *THRegionLocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THRegionLocation(%+v)", *p)
}

func (p *THRegionLocation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*THRegionLocation)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ServerName.CompareTo(data.ServerName); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.RegionInfo.CompareTo(data.RegionInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *THRegionLocation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ServerName
  case 2: return p.RegionInfo
  }
  return nil
}

func (p *THRegionLocation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("serverName", thrift.STRUCT, 1),
    thrift.NewTField("regionInfo", thrift.STRUCT, 2),
    })
}

/**
 * A TIOError exception signals that an error occurred communicating
 * to the HBase master or a HBase region server. Also used to return
 * more general HBase error conditions.
 * 
 * Attributes:
 *  - Message
 */
type TIOError struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewTIOError() *TIOError {
  output := &TIOError{
    TStruct:thrift.NewTStruct("TIOError", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *TIOError) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TIOError) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v341, err342 := iprot.ReadString()
  if err342 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err342); }
  p.Message = v341
  return err
}

func (p *TIOError) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TIOError) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TIOError")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TIOError) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *TIOError) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TIOError) TStructName() string {
  return "TIOError"
}

func (p *TIOError) ThriftName() string {
  return "TIOError"
}

func (p *TIOError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIOError(%+v)", *p)
}

func (p *TIOError) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TIOError)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TIOError) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *TIOError) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * A TIllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 * 
 * Attributes:
 *  - Message
 */
type TIllegalArgument struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewTIllegalArgument() *TIllegalArgument {
  output := &TIllegalArgument{
    TStruct:thrift.NewTStruct("TIllegalArgument", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *TIllegalArgument) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TIllegalArgument) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v343, err344 := iprot.ReadString()
  if err344 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err344); }
  p.Message = v343
  return err
}

func (p *TIllegalArgument) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TIllegalArgument) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TIllegalArgument")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TIllegalArgument) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *TIllegalArgument) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TIllegalArgument) TStructName() string {
  return "TIllegalArgument"
}

func (p *TIllegalArgument) ThriftName() string {
  return "TIllegalArgument"
}

func (p *TIllegalArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIllegalArgument(%+v)", *p)
}

func (p *TIllegalArgument) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TIllegalArgument)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TIllegalArgument) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *TIllegalArgument) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

func init() {
}

