/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hbase;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type ITHBaseService interface {
  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * Parameters:
   *  - Table: the table to check on
   *  - Tget: the TGet to check for
   */
  Exists(table string, tget *TGet) (retval345 bool, io *TIOError, err os.Error)
  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * Parameters:
   *  - Table: the table to get from
   *  - Tget: the TGet to fetch
   */
  Get(table string, tget *TGet) (retval346 *TResult, io *TIOError, err os.Error)
  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * Parameters:
   *  - Table: the table to get from
   *  - Tgets: a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  GetMultiple(table string, tgets thrift.TList) (retval347 thrift.TList, io *TIOError, err os.Error)
  /**
   * Commit a TPut to a table.
   * 
   * Parameters:
   *  - Table: the table to put data in
   *  - Tput: the TPut to put
   */
  Put(table string, tput *TPut) (io *TIOError, err os.Error)
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * Parameters:
   *  - Table: to check in and put to
   *  - Row: row to check
   *  - Family: column family to check
   *  - Qualifier: column qualifier to check
   *  - Value: the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   *  - Tput: the TPut to put if the check succeeds
   */
  CheckAndPut(table string, row string, family string, qualifier string, value string, tput *TPut) (retval349 bool, io *TIOError, err os.Error)
  /**
   * Commit a List of Puts to the table.
   * 
   * Parameters:
   *  - Table: the table to put data in
   *  - Tputs: a list of TPuts to commit
   */
  PutMultiple(table string, tputs thrift.TList) (io *TIOError, err os.Error)
  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * Parameters:
   *  - Table: the table to delete from
   *  - Tdelete: the TDelete to delete
   */
  DeleteSingle(table string, tdelete *TDelete) (io *TIOError, err os.Error)
  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * Parameters:
   *  - Table: the table to delete from
   *  - Tdeletes: list of TDeletes to delete
   */
  DeleteMultiple(table string, tdeletes thrift.TList) (retval352 thrift.TList, io *TIOError, err os.Error)
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * Parameters:
   *  - Table: to check in and delete from
   *  - Row: row to check
   *  - Family: column family to check
   *  - Qualifier: column qualifier to check
   *  - Value: the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   *  - Tdelete: the TDelete to execute if the check succeeds
   */
  CheckAndDelete(table string, row string, family string, qualifier string, value string, tdelete *TDelete) (retval353 bool, io *TIOError, err os.Error)
  /**
   * Parameters:
   *  - Table: the table to increment the value on
   *  - Tincrement: the TIncrement to increment
   */
  Increment(table string, tincrement *TIncrement) (retval354 *TResult, io *TIOError, err os.Error)
  /**
   * Parameters:
   *  - Table: the table to append the value on
   *  - Tappend: the TAppend to append
   */
  Append(table string, tappend *TAppend) (retval355 *TResult, io *TIOError, err os.Error)
  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * Parameters:
   *  - Table: the table to get the Scanner for
   *  - Tscan: the scan object to get a Scanner for
   */
  OpenScanner(table string, tscan *TScan) (retval356 int32, io *TIOError, err os.Error)
  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * Parameters:
   *  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   *  - NumRows: number of rows to return
   */
  GetScannerRows(scannerId int32, numRows int32) (retval357 thrift.TList, io *TIOError, ia *TIllegalArgument, err os.Error)
  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * Parameters:
   *  - ScannerId: the Id of the Scanner to close *
   */
  CloseScanner(scannerId int32) (io *TIOError, ia *TIllegalArgument, err os.Error)
  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * Parameters:
   *  - Table: table to apply the mutations
   *  - TrowMutations: mutations to apply
   */
  MutateRow(table string, trowMutations *TRowMutations) (io *TIOError, err os.Error)
  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * Parameters:
   *  - Table: the table to get the Scanner for
   *  - Tscan: the scan object to get a Scanner for
   *  - NumRows: number of rows to return
   */
  GetScannerResults(table string, tscan *TScan, numRows int32) (retval360 thrift.TList, io *TIOError, err os.Error)
  /**
   * Given a table and a row get the location of the region that
   * would contain the given row key.
   * 
   * reload = true means the cache will be cleared and the location
   * will be fetched from meta.
   * 
   * Parameters:
   *  - Table
   *  - Row
   *  - Reload
   */
  GetRegionLocation(table string, row string, reload bool) (retval361 *THRegionLocation, io *TIOError, err os.Error)
  /**
   * Get all of the region locations for a given table.
   * 
   * 
   * Parameters:
   *  - Table
   */
  GetAllRegionLocations(table string) (retval362 thrift.TList, io *TIOError, err os.Error)
}

type THBaseServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewTHBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *THBaseServiceClient {
  return &THBaseServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewTHBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *THBaseServiceClient {
  return &THBaseServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Test for the existence of columns in the table, as specified in the TGet.
 * 
 * @return true if the specified TGet matches one or more keys, false if not
 * 
 * Parameters:
 *  - Table: the table to check on
 *  - Tget: the TGet to check for
 */
func (p *THBaseServiceClient) Exists(table string, tget *TGet) (retval363 bool, io *TIOError, err os.Error) {
  err = p.SendExists(table, tget)
  if err != nil { return }
  return p.RecvExists()
}

func (p *THBaseServiceClient) SendExists(table string, tget *TGet)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("exists", thrift.CALL, p.SeqId)
  args364 := NewExistsArgs()
  args364.Table = table
  args364.Tget = tget
  err = args364.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvExists() (value bool, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error366 := thrift.NewTApplicationExceptionDefault()
    error367, err := error366.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error367
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result365 := NewExistsResult()
  err = result365.Read(iprot)
  iprot.ReadMessageEnd()
  value = result365.Success
  if result365.Io != nil {
    io = result365.Io
  }
  return
}

/**
 * Method for getting data from a row.
 * 
 * If the row cannot be found an empty Result is returned.
 * This can be checked by the empty field of the TResult
 * 
 * @return the result
 * 
 * Parameters:
 *  - Table: the table to get from
 *  - Tget: the TGet to fetch
 */
func (p *THBaseServiceClient) Get(table string, tget *TGet) (retval368 *TResult, io *TIOError, err os.Error) {
  err = p.SendGet(table, tget)
  if err != nil { return }
  return p.RecvGet()
}

func (p *THBaseServiceClient) SendGet(table string, tget *TGet)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
  args369 := NewGetArgs()
  args369.Table = table
  args369.Tget = tget
  err = args369.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGet() (value *TResult, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error371 := thrift.NewTApplicationExceptionDefault()
    error372, err := error371.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error372
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result370 := NewGetResult()
  err = result370.Read(iprot)
  iprot.ReadMessageEnd()
  value = result370.Success
  if result370.Io != nil {
    io = result370.Io
  }
  return
}

/**
 * Method for getting multiple rows.
 * 
 * If a row cannot be found there will be a null
 * value in the result list for that TGet at the
 * same position.
 * 
 * So the Results are in the same order as the TGets.
 * 
 * Parameters:
 *  - Table: the table to get from
 *  - Tgets: a list of TGets to fetch, the Result list
 * will have the Results at corresponding positions
 * or null if there was an error
 */
func (p *THBaseServiceClient) GetMultiple(table string, tgets thrift.TList) (retval373 thrift.TList, io *TIOError, err os.Error) {
  err = p.SendGetMultiple(table, tgets)
  if err != nil { return }
  return p.RecvGetMultiple()
}

func (p *THBaseServiceClient) SendGetMultiple(table string, tgets thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getMultiple", thrift.CALL, p.SeqId)
  args374 := NewGetMultipleArgs()
  args374.Table = table
  args374.Tgets = tgets
  err = args374.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGetMultiple() (value thrift.TList, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error376 := thrift.NewTApplicationExceptionDefault()
    error377, err := error376.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error377
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result375 := NewGetMultipleResult()
  err = result375.Read(iprot)
  iprot.ReadMessageEnd()
  value = result375.Success
  if result375.Io != nil {
    io = result375.Io
  }
  return
}

/**
 * Commit a TPut to a table.
 * 
 * Parameters:
 *  - Table: the table to put data in
 *  - Tput: the TPut to put
 */
func (p *THBaseServiceClient) Put(table string, tput *TPut) (io *TIOError, err os.Error) {
  err = p.SendPut(table, tput)
  if err != nil { return }
  return p.RecvPut()
}

func (p *THBaseServiceClient) SendPut(table string, tput *TPut)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId)
  args379 := NewPutArgs()
  args379.Table = table
  args379.Tput = tput
  err = args379.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvPut() (io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error381 := thrift.NewTApplicationExceptionDefault()
    error382, err := error381.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error382
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result380 := NewPutResult()
  err = result380.Read(iprot)
  iprot.ReadMessageEnd()
  if result380.Io != nil {
    io = result380.Io
  }
  return
}

/**
 * Atomically checks if a row/family/qualifier value matches the expected
 * value. If it does, it adds the TPut.
 * 
 * @return true if the new put was executed, false otherwise
 * 
 * Parameters:
 *  - Table: to check in and put to
 *  - Row: row to check
 *  - Family: column family to check
 *  - Qualifier: column qualifier to check
 *  - Value: the expected value, if not provided the
 * check is for the non-existence of the
 * column in question
 *  - Tput: the TPut to put if the check succeeds
 */
func (p *THBaseServiceClient) CheckAndPut(table string, row string, family string, qualifier string, value string, tput *TPut) (retval383 bool, io *TIOError, err os.Error) {
  err = p.SendCheckAndPut(table, row, family, qualifier, value, tput)
  if err != nil { return }
  return p.RecvCheckAndPut()
}

func (p *THBaseServiceClient) SendCheckAndPut(table string, row string, family string, qualifier string, value string, tput *TPut)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("checkAndPut", thrift.CALL, p.SeqId)
  args384 := NewCheckAndPutArgs()
  args384.Table = table
  args384.Row = row
  args384.Family = family
  args384.Qualifier = qualifier
  args384.Value = value
  args384.Tput = tput
  err = args384.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvCheckAndPut() (value bool, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error386 := thrift.NewTApplicationExceptionDefault()
    error387, err := error386.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error387
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result385 := NewCheckAndPutResult()
  err = result385.Read(iprot)
  iprot.ReadMessageEnd()
  value = result385.Success
  if result385.Io != nil {
    io = result385.Io
  }
  return
}

/**
 * Commit a List of Puts to the table.
 * 
 * Parameters:
 *  - Table: the table to put data in
 *  - Tputs: a list of TPuts to commit
 */
func (p *THBaseServiceClient) PutMultiple(table string, tputs thrift.TList) (io *TIOError, err os.Error) {
  err = p.SendPutMultiple(table, tputs)
  if err != nil { return }
  return p.RecvPutMultiple()
}

func (p *THBaseServiceClient) SendPutMultiple(table string, tputs thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("putMultiple", thrift.CALL, p.SeqId)
  args389 := NewPutMultipleArgs()
  args389.Table = table
  args389.Tputs = tputs
  err = args389.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvPutMultiple() (io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error391 := thrift.NewTApplicationExceptionDefault()
    error392, err := error391.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error392
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result390 := NewPutMultipleResult()
  err = result390.Read(iprot)
  iprot.ReadMessageEnd()
  if result390.Io != nil {
    io = result390.Io
  }
  return
}

/**
 * Deletes as specified by the TDelete.
 * 
 * Note: "delete" is a reserved keyword and cannot be used in Thrift
 * thus the inconsistent naming scheme from the other functions.
 * 
 * Parameters:
 *  - Table: the table to delete from
 *  - Tdelete: the TDelete to delete
 */
func (p *THBaseServiceClient) DeleteSingle(table string, tdelete *TDelete) (io *TIOError, err os.Error) {
  err = p.SendDeleteSingle(table, tdelete)
  if err != nil { return }
  return p.RecvDeleteSingle()
}

func (p *THBaseServiceClient) SendDeleteSingle(table string, tdelete *TDelete)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteSingle", thrift.CALL, p.SeqId)
  args394 := NewDeleteSingleArgs()
  args394.Table = table
  args394.Tdelete = tdelete
  err = args394.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvDeleteSingle() (io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error396 := thrift.NewTApplicationExceptionDefault()
    error397, err := error396.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error397
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result395 := NewDeleteSingleResult()
  err = result395.Read(iprot)
  iprot.ReadMessageEnd()
  if result395.Io != nil {
    io = result395.Io
  }
  return
}

/**
 * Bulk commit a List of TDeletes to the table.
 * 
 * Throws a TIOError if any of the deletes fail.
 * 
 * Always returns an empty list for backwards compatibility.
 * 
 * Parameters:
 *  - Table: the table to delete from
 *  - Tdeletes: list of TDeletes to delete
 */
func (p *THBaseServiceClient) DeleteMultiple(table string, tdeletes thrift.TList) (retval398 thrift.TList, io *TIOError, err os.Error) {
  err = p.SendDeleteMultiple(table, tdeletes)
  if err != nil { return }
  return p.RecvDeleteMultiple()
}

func (p *THBaseServiceClient) SendDeleteMultiple(table string, tdeletes thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteMultiple", thrift.CALL, p.SeqId)
  args399 := NewDeleteMultipleArgs()
  args399.Table = table
  args399.Tdeletes = tdeletes
  err = args399.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvDeleteMultiple() (value thrift.TList, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error401 := thrift.NewTApplicationExceptionDefault()
    error402, err := error401.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error402
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result400 := NewDeleteMultipleResult()
  err = result400.Read(iprot)
  iprot.ReadMessageEnd()
  value = result400.Success
  if result400.Io != nil {
    io = result400.Io
  }
  return
}

/**
 * Atomically checks if a row/family/qualifier value matches the expected
 * value. If it does, it adds the delete.
 * 
 * @return true if the new delete was executed, false otherwise
 * 
 * Parameters:
 *  - Table: to check in and delete from
 *  - Row: row to check
 *  - Family: column family to check
 *  - Qualifier: column qualifier to check
 *  - Value: the expected value, if not provided the
 * check is for the non-existence of the
 * column in question
 *  - Tdelete: the TDelete to execute if the check succeeds
 */
func (p *THBaseServiceClient) CheckAndDelete(table string, row string, family string, qualifier string, value string, tdelete *TDelete) (retval403 bool, io *TIOError, err os.Error) {
  err = p.SendCheckAndDelete(table, row, family, qualifier, value, tdelete)
  if err != nil { return }
  return p.RecvCheckAndDelete()
}

func (p *THBaseServiceClient) SendCheckAndDelete(table string, row string, family string, qualifier string, value string, tdelete *TDelete)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("checkAndDelete", thrift.CALL, p.SeqId)
  args404 := NewCheckAndDeleteArgs()
  args404.Table = table
  args404.Row = row
  args404.Family = family
  args404.Qualifier = qualifier
  args404.Value = value
  args404.Tdelete = tdelete
  err = args404.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvCheckAndDelete() (value bool, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error406 := thrift.NewTApplicationExceptionDefault()
    error407, err := error406.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error407
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result405 := NewCheckAndDeleteResult()
  err = result405.Read(iprot)
  iprot.ReadMessageEnd()
  value = result405.Success
  if result405.Io != nil {
    io = result405.Io
  }
  return
}

/**
 * Parameters:
 *  - Table: the table to increment the value on
 *  - Tincrement: the TIncrement to increment
 */
func (p *THBaseServiceClient) Increment(table string, tincrement *TIncrement) (retval408 *TResult, io *TIOError, err os.Error) {
  err = p.SendIncrement(table, tincrement)
  if err != nil { return }
  return p.RecvIncrement()
}

func (p *THBaseServiceClient) SendIncrement(table string, tincrement *TIncrement)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("increment", thrift.CALL, p.SeqId)
  args409 := NewIncrementArgs()
  args409.Table = table
  args409.Tincrement = tincrement
  err = args409.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvIncrement() (value *TResult, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error411 := thrift.NewTApplicationExceptionDefault()
    error412, err := error411.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error412
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result410 := NewIncrementResult()
  err = result410.Read(iprot)
  iprot.ReadMessageEnd()
  value = result410.Success
  if result410.Io != nil {
    io = result410.Io
  }
  return
}

/**
 * Parameters:
 *  - Table: the table to append the value on
 *  - Tappend: the TAppend to append
 */
func (p *THBaseServiceClient) Append(table string, tappend *TAppend) (retval413 *TResult, io *TIOError, err os.Error) {
  err = p.SendAppend(table, tappend)
  if err != nil { return }
  return p.RecvAppend()
}

func (p *THBaseServiceClient) SendAppend(table string, tappend *TAppend)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("append", thrift.CALL, p.SeqId)
  args414 := NewAppendArgs()
  args414.Table = table
  args414.Tappend = tappend
  err = args414.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvAppend() (value *TResult, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error416 := thrift.NewTApplicationExceptionDefault()
    error417, err := error416.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error417
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result415 := NewAppendResult()
  err = result415.Read(iprot)
  iprot.ReadMessageEnd()
  value = result415.Success
  if result415.Io != nil {
    io = result415.Io
  }
  return
}

/**
 * Get a Scanner for the provided TScan object.
 * 
 * @return Scanner Id to be used with other scanner procedures
 * 
 * Parameters:
 *  - Table: the table to get the Scanner for
 *  - Tscan: the scan object to get a Scanner for
 */
func (p *THBaseServiceClient) OpenScanner(table string, tscan *TScan) (retval418 int32, io *TIOError, err os.Error) {
  err = p.SendOpenScanner(table, tscan)
  if err != nil { return }
  return p.RecvOpenScanner()
}

func (p *THBaseServiceClient) SendOpenScanner(table string, tscan *TScan)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("openScanner", thrift.CALL, p.SeqId)
  args419 := NewOpenScannerArgs()
  args419.Table = table
  args419.Tscan = tscan
  err = args419.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvOpenScanner() (value int32, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error421 := thrift.NewTApplicationExceptionDefault()
    error422, err := error421.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error422
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result420 := NewOpenScannerResult()
  err = result420.Read(iprot)
  iprot.ReadMessageEnd()
  value = result420.Success
  if result420.Io != nil {
    io = result420.Io
  }
  return
}

/**
 * Grabs multiple rows from a Scanner.
 * 
 * @return Between zero and numRows TResults
 * 
 * Parameters:
 *  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
 *  - NumRows: number of rows to return
 */
func (p *THBaseServiceClient) GetScannerRows(scannerId int32, numRows int32) (retval423 thrift.TList, io *TIOError, ia *TIllegalArgument, err os.Error) {
  err = p.SendGetScannerRows(scannerId, numRows)
  if err != nil { return }
  return p.RecvGetScannerRows()
}

func (p *THBaseServiceClient) SendGetScannerRows(scannerId int32, numRows int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getScannerRows", thrift.CALL, p.SeqId)
  args424 := NewGetScannerRowsArgs()
  args424.ScannerId = scannerId
  args424.NumRows = numRows
  err = args424.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGetScannerRows() (value thrift.TList, io *TIOError, ia *TIllegalArgument, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error426 := thrift.NewTApplicationExceptionDefault()
    error427, err := error426.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error427
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result425 := NewGetScannerRowsResult()
  err = result425.Read(iprot)
  iprot.ReadMessageEnd()
  value = result425.Success
  if result425.Io != nil {
    io = result425.Io
  }
  if result425.Ia != nil {
    ia = result425.Ia
  }
  return
}

/**
 * Closes the scanner. Should be called to free server side resources timely.
 * Typically close once the scanner is not needed anymore, i.e. after looping
 * over it to get all the required rows.
 * 
 * Parameters:
 *  - ScannerId: the Id of the Scanner to close *
 */
func (p *THBaseServiceClient) CloseScanner(scannerId int32) (io *TIOError, ia *TIllegalArgument, err os.Error) {
  err = p.SendCloseScanner(scannerId)
  if err != nil { return }
  return p.RecvCloseScanner()
}

func (p *THBaseServiceClient) SendCloseScanner(scannerId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("closeScanner", thrift.CALL, p.SeqId)
  args429 := NewCloseScannerArgs()
  args429.ScannerId = scannerId
  err = args429.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvCloseScanner() (io *TIOError, ia *TIllegalArgument, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error431 := thrift.NewTApplicationExceptionDefault()
    error432, err := error431.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error432
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result430 := NewCloseScannerResult()
  err = result430.Read(iprot)
  iprot.ReadMessageEnd()
  if result430.Io != nil {
    io = result430.Io
  }
  if result430.Ia != nil {
    ia = result430.Ia
  }
  return
}

/**
 * mutateRow performs multiple mutations atomically on a single row.
 * 
 * Parameters:
 *  - Table: table to apply the mutations
 *  - TrowMutations: mutations to apply
 */
func (p *THBaseServiceClient) MutateRow(table string, trowMutations *TRowMutations) (io *TIOError, err os.Error) {
  err = p.SendMutateRow(table, trowMutations)
  if err != nil { return }
  return p.RecvMutateRow()
}

func (p *THBaseServiceClient) SendMutateRow(table string, trowMutations *TRowMutations)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId)
  args434 := NewMutateRowArgs()
  args434.Table = table
  args434.TrowMutations = trowMutations
  err = args434.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvMutateRow() (io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error436 := thrift.NewTApplicationExceptionDefault()
    error437, err := error436.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error437
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result435 := NewMutateRowResult()
  err = result435.Read(iprot)
  iprot.ReadMessageEnd()
  if result435.Io != nil {
    io = result435.Io
  }
  return
}

/**
 * Get results for the provided TScan object.
 * This helper function opens a scanner, get the results and close the scanner.
 * 
 * @return between zero and numRows TResults
 * 
 * Parameters:
 *  - Table: the table to get the Scanner for
 *  - Tscan: the scan object to get a Scanner for
 *  - NumRows: number of rows to return
 */
func (p *THBaseServiceClient) GetScannerResults(table string, tscan *TScan, numRows int32) (retval438 thrift.TList, io *TIOError, err os.Error) {
  err = p.SendGetScannerResults(table, tscan, numRows)
  if err != nil { return }
  return p.RecvGetScannerResults()
}

func (p *THBaseServiceClient) SendGetScannerResults(table string, tscan *TScan, numRows int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getScannerResults", thrift.CALL, p.SeqId)
  args439 := NewGetScannerResultsArgs()
  args439.Table = table
  args439.Tscan = tscan
  args439.NumRows = numRows
  err = args439.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGetScannerResults() (value thrift.TList, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error441 := thrift.NewTApplicationExceptionDefault()
    error442, err := error441.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error442
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result440 := NewGetScannerResultsResult()
  err = result440.Read(iprot)
  iprot.ReadMessageEnd()
  value = result440.Success
  if result440.Io != nil {
    io = result440.Io
  }
  return
}

/**
 * Given a table and a row get the location of the region that
 * would contain the given row key.
 * 
 * reload = true means the cache will be cleared and the location
 * will be fetched from meta.
 * 
 * Parameters:
 *  - Table
 *  - Row
 *  - Reload
 */
func (p *THBaseServiceClient) GetRegionLocation(table string, row string, reload bool) (retval443 *THRegionLocation, io *TIOError, err os.Error) {
  err = p.SendGetRegionLocation(table, row, reload)
  if err != nil { return }
  return p.RecvGetRegionLocation()
}

func (p *THBaseServiceClient) SendGetRegionLocation(table string, row string, reload bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRegionLocation", thrift.CALL, p.SeqId)
  args444 := NewGetRegionLocationArgs()
  args444.Table = table
  args444.Row = row
  args444.Reload = reload
  err = args444.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGetRegionLocation() (value *THRegionLocation, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error446 := thrift.NewTApplicationExceptionDefault()
    error447, err := error446.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error447
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result445 := NewGetRegionLocationResult()
  err = result445.Read(iprot)
  iprot.ReadMessageEnd()
  value = result445.Success
  if result445.Io != nil {
    io = result445.Io
  }
  return
}

/**
 * Get all of the region locations for a given table.
 * 
 * 
 * Parameters:
 *  - Table
 */
func (p *THBaseServiceClient) GetAllRegionLocations(table string) (retval448 thrift.TList, io *TIOError, err os.Error) {
  err = p.SendGetAllRegionLocations(table)
  if err != nil { return }
  return p.RecvGetAllRegionLocations()
}

func (p *THBaseServiceClient) SendGetAllRegionLocations(table string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getAllRegionLocations", thrift.CALL, p.SeqId)
  args449 := NewGetAllRegionLocationsArgs()
  args449.Table = table
  err = args449.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *THBaseServiceClient) RecvGetAllRegionLocations() (value thrift.TList, io *TIOError, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error451 := thrift.NewTApplicationExceptionDefault()
    error452, err := error451.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error452
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result450 := NewGetAllRegionLocationsResult()
  err = result450.Read(iprot)
  iprot.ReadMessageEnd()
  value = result450.Success
  if result450.Io != nil {
    io = result450.Io
  }
  return
}


type THBaseServiceProcessor struct {
  handler ITHBaseService
  processorMap map[string]thrift.TProcessorFunction
}

func (p *THBaseServiceProcessor) Handler() ITHBaseService {
  return p.handler
}

func (p *THBaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *THBaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *THBaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTHBaseServiceProcessor(handler ITHBaseService) *THBaseServiceProcessor {

  self453 := &THBaseServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self453.processorMap["exists"] = &tHBaseServiceProcessorExists{handler:handler}
  self453.processorMap["get"] = &tHBaseServiceProcessorGet{handler:handler}
  self453.processorMap["getMultiple"] = &tHBaseServiceProcessorGetMultiple{handler:handler}
  self453.processorMap["put"] = &tHBaseServiceProcessorPut{handler:handler}
  self453.processorMap["checkAndPut"] = &tHBaseServiceProcessorCheckAndPut{handler:handler}
  self453.processorMap["putMultiple"] = &tHBaseServiceProcessorPutMultiple{handler:handler}
  self453.processorMap["deleteSingle"] = &tHBaseServiceProcessorDeleteSingle{handler:handler}
  self453.processorMap["deleteMultiple"] = &tHBaseServiceProcessorDeleteMultiple{handler:handler}
  self453.processorMap["checkAndDelete"] = &tHBaseServiceProcessorCheckAndDelete{handler:handler}
  self453.processorMap["increment"] = &tHBaseServiceProcessorIncrement{handler:handler}
  self453.processorMap["append"] = &tHBaseServiceProcessorAppend{handler:handler}
  self453.processorMap["openScanner"] = &tHBaseServiceProcessorOpenScanner{handler:handler}
  self453.processorMap["getScannerRows"] = &tHBaseServiceProcessorGetScannerRows{handler:handler}
  self453.processorMap["closeScanner"] = &tHBaseServiceProcessorCloseScanner{handler:handler}
  self453.processorMap["mutateRow"] = &tHBaseServiceProcessorMutateRow{handler:handler}
  self453.processorMap["getScannerResults"] = &tHBaseServiceProcessorGetScannerResults{handler:handler}
  self453.processorMap["getRegionLocation"] = &tHBaseServiceProcessorGetRegionLocation{handler:handler}
  self453.processorMap["getAllRegionLocations"] = &tHBaseServiceProcessorGetAllRegionLocations{handler:handler}
return self453
}

func (p *THBaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x454 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x454.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x454
  }
  return process.Process(seqId, iprot, oprot)
}

type tHBaseServiceProcessorExists struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorExists) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewExistsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("exists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewExistsResult()
  if result.Success, result.Io, err = p.handler.Exists(args.Table, args.Tget); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists: " + err.String())
    oprot.WriteMessageBegin("exists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("exists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGet struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetResult()
  if result.Success, result.Io, err = p.handler.Get(args.Table, args.Tget); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.String())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetMultiple struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGetMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetMultipleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetMultipleResult()
  if result.Success, result.Io, err = p.handler.GetMultiple(args.Table, args.Tgets); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMultiple: " + err.String())
    oprot.WriteMessageBegin("getMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorPut struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPutArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPutResult()
  if result.Io, err = p.handler.Put(args.Table, args.Tput); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err.String())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCheckAndPut struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorCheckAndPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCheckAndPutArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCheckAndPutResult()
  if result.Success, result.Io, err = p.handler.CheckAndPut(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tput); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndPut: " + err.String())
    oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("checkAndPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorPutMultiple struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorPutMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPutMultipleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("putMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPutMultipleResult()
  if result.Io, err = p.handler.PutMultiple(args.Table, args.Tputs); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putMultiple: " + err.String())
    oprot.WriteMessageBegin("putMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("putMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorDeleteSingle struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorDeleteSingle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteSingleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("deleteSingle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteSingleResult()
  if result.Io, err = p.handler.DeleteSingle(args.Table, args.Tdelete); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSingle: " + err.String())
    oprot.WriteMessageBegin("deleteSingle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteSingle", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorDeleteMultiple struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorDeleteMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteMultipleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("deleteMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteMultipleResult()
  if result.Success, result.Io, err = p.handler.DeleteMultiple(args.Table, args.Tdeletes); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteMultiple: " + err.String())
    oprot.WriteMessageBegin("deleteMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCheckAndDelete struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorCheckAndDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCheckAndDeleteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("checkAndDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCheckAndDeleteResult()
  if result.Success, result.Io, err = p.handler.CheckAndDelete(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tdelete); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndDelete: " + err.String())
    oprot.WriteMessageBegin("checkAndDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("checkAndDelete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorIncrement struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIncrementArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIncrementResult()
  if result.Success, result.Io, err = p.handler.Increment(args.Table, args.Tincrement); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: " + err.String())
    oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorAppend struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorAppend) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAppendArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAppendResult()
  if result.Success, result.Io, err = p.handler.Append(args.Table, args.Tappend); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append: " + err.String())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("append", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorOpenScanner struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorOpenScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewOpenScannerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("openScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewOpenScannerResult()
  if result.Success, result.Io, err = p.handler.OpenScanner(args.Table, args.Tscan); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openScanner: " + err.String())
    oprot.WriteMessageBegin("openScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("openScanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetScannerRows struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGetScannerRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetScannerRowsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getScannerRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetScannerRowsResult()
  if result.Success, result.Io, result.Ia, err = p.handler.GetScannerRows(args.ScannerId, args.NumRows); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getScannerRows: " + err.String())
    oprot.WriteMessageBegin("getScannerRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getScannerRows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCloseScanner struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorCloseScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCloseScannerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCloseScannerResult()
  if result.Io, result.Ia, err = p.handler.CloseScanner(args.ScannerId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeScanner: " + err.String())
    oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("closeScanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorMutateRow struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMutateRowArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMutateRowResult()
  if result.Io, err = p.handler.MutateRow(args.Table, args.TrowMutations); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: " + err.String())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetScannerResults struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGetScannerResults) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetScannerResultsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getScannerResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetScannerResultsResult()
  if result.Success, result.Io, err = p.handler.GetScannerResults(args.Table, args.Tscan, args.NumRows); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getScannerResults: " + err.String())
    oprot.WriteMessageBegin("getScannerResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getScannerResults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetRegionLocation struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGetRegionLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRegionLocationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getRegionLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRegionLocationResult()
  if result.Success, result.Io, err = p.handler.GetRegionLocation(args.Table, args.Row, args.Reload); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionLocation: " + err.String())
    oprot.WriteMessageBegin("getRegionLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRegionLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetAllRegionLocations struct {
  handler ITHBaseService
}

func (p *tHBaseServiceProcessorGetAllRegionLocations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAllRegionLocationsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getAllRegionLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAllRegionLocationsResult()
  if result.Success, result.Io, err = p.handler.GetAllRegionLocations(args.Table); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllRegionLocations: " + err.String())
    oprot.WriteMessageBegin("getAllRegionLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getAllRegionLocations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Table: the table to check on
 *  - Tget: the TGet to check for
 */
type ExistsArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tget *TGet "tget"; // 2
}

func NewExistsArgs() *ExistsArgs {
  output := &ExistsArgs{
    TStruct:thrift.NewTStruct("exists_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tget", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ExistsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tget" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ExistsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v455, err456 := iprot.ReadString()
  if err456 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err456); }
  p.Table = v455
  return err
}

func (p *ExistsArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ExistsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tget = NewTGet()
  err459 := p.Tget.Read(iprot)
  if err459 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TgetTGet", err459); }
  return err
}

func (p *ExistsArgs) ReadFieldTget(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ExistsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("exists_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ExistsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *ExistsArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ExistsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tget != nil {
    err = oprot.WriteFieldBegin("tget", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tget", p.ThriftName(), err); }
    err = p.Tget.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TGet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tget", p.ThriftName(), err); }
  }
  return err
}

func (p *ExistsArgs) WriteFieldTget(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ExistsArgs) TStructName() string {
  return "ExistsArgs"
}

func (p *ExistsArgs) ThriftName() string {
  return "exists_args"
}

func (p *ExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExistsArgs(%+v)", *p)
}

func (p *ExistsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ExistsArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tget.CompareTo(data.Tget); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ExistsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tget
  }
  return nil
}

func (p *ExistsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tget", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ExistsResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  Io *TIOError "io"; // 1
}

func NewExistsResult() *ExistsResult {
  output := &ExistsResult{
    TStruct:thrift.NewTStruct("exists_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ExistsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ExistsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v460, err461 := iprot.ReadBool()
  if err461 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err461); }
  p.Success = v460
  return err
}

func (p *ExistsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ExistsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err464 := p.Io.Read(iprot)
  if err464 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err464); }
  return err
}

func (p *ExistsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ExistsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("exists_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ExistsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ExistsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ExistsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ExistsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ExistsResult) TStructName() string {
  return "ExistsResult"
}

func (p *ExistsResult) ThriftName() string {
  return "exists_result"
}

func (p *ExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExistsResult(%+v)", *p)
}

func (p *ExistsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ExistsResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ExistsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ExistsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to get from
 *  - Tget: the TGet to fetch
 */
type GetArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tget *TGet "tget"; // 2
}

func NewGetArgs() *GetArgs {
  output := &GetArgs{
    TStruct:thrift.NewTStruct("get_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tget", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tget" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v465, err466 := iprot.ReadString()
  if err466 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err466); }
  p.Table = v465
  return err
}

func (p *GetArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tget = NewTGet()
  err469 := p.Tget.Read(iprot)
  if err469 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TgetTGet", err469); }
  return err
}

func (p *GetArgs) ReadFieldTget(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tget != nil {
    err = oprot.WriteFieldBegin("tget", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tget", p.ThriftName(), err); }
    err = p.Tget.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TGet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tget", p.ThriftName(), err); }
  }
  return err
}

func (p *GetArgs) WriteFieldTget(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetArgs) TStructName() string {
  return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
  return "get_args"
}

func (p *GetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tget.CompareTo(data.Tget); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tget
  }
  return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tget", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetResult struct {
  thrift.TStruct
  Success *TResult "success"; // 0
  Io *TIOError "io"; // 1
}

func NewGetResult() *GetResult {
  output := &GetResult{
    TStruct:thrift.NewTStruct("get_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTResult()
  err472 := p.Success.Read(iprot)
  if err472 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTResult", err472); }
  return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err475 := p.Io.Read(iprot)
  if err475 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err475); }
  return err
}

func (p *GetResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetResult) TStructName() string {
  return "GetResult"
}

func (p *GetResult) ThriftName() string {
  return "get_result"
}

func (p *GetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to get from
 *  - Tgets: a list of TGets to fetch, the Result list
 * will have the Results at corresponding positions
 * or null if there was an error
 */
type GetMultipleArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tgets thrift.TList "tgets"; // 2
}

func NewGetMultipleArgs() *GetMultipleArgs {
  output := &GetMultipleArgs{
    TStruct:thrift.NewTStruct("getMultiple_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tgets", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetMultipleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tgets" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMultipleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v476, err477 := iprot.ReadString()
  if err477 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err477); }
  p.Table = v476
  return err
}

func (p *GetMultipleArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMultipleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype483, _size480, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Tgets", "", err)
  }
  p.Tgets = thrift.NewTList(_etype483, _size480)
  for _i484:= 0; _i484 < _size480; _i484++ {
    _elem485 := NewTGet()
    err488 := _elem485.Read(iprot)
    if err488 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem485TGet", err488); }
    p.Tgets.Push(_elem485)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetMultipleArgs) ReadFieldTgets(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetMultipleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getMultiple_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMultipleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *GetMultipleArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMultipleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tgets != nil {
    err = oprot.WriteFieldBegin("tgets", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tgets", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Tgets.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter489 := range p.Tgets.Iter() {
      Iter490 := Iter489.(*TGet)
      err = Iter490.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TGet", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tgets", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMultipleArgs) WriteFieldTgets(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetMultipleArgs) TStructName() string {
  return "GetMultipleArgs"
}

func (p *GetMultipleArgs) ThriftName() string {
  return "getMultiple_args"
}

func (p *GetMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMultipleArgs(%+v)", *p)
}

func (p *GetMultipleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMultipleArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tgets.CompareTo(data.Tgets); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetMultipleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tgets
  }
  return nil
}

func (p *GetMultipleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tgets", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetMultipleResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *TIOError "io"; // 1
}

func NewGetMultipleResult() *GetMultipleResult {
  output := &GetMultipleResult{
    TStruct:thrift.NewTStruct("getMultiple_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetMultipleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMultipleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype496, _size493, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype496, _size493)
  for _i497:= 0; _i497 < _size493; _i497++ {
    _elem498 := NewTResult()
    err501 := _elem498.Read(iprot)
    if err501 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem498TResult", err501); }
    p.Success.Push(_elem498)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetMultipleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetMultipleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err504 := p.Io.Read(iprot)
  if err504 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err504); }
  return err
}

func (p *GetMultipleResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMultipleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getMultiple_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMultipleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter505 := range p.Success.Iter() {
      Iter506 := Iter505.(*TResult)
      err = Iter506.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMultipleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetMultipleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMultipleResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMultipleResult) TStructName() string {
  return "GetMultipleResult"
}

func (p *GetMultipleResult) ThriftName() string {
  return "getMultiple_result"
}

func (p *GetMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMultipleResult(%+v)", *p)
}

func (p *GetMultipleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMultipleResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetMultipleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetMultipleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to put data in
 *  - Tput: the TPut to put
 */
type PutArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tput *TPut "tput"; // 2
}

func NewPutArgs() *PutArgs {
  output := &PutArgs{
    TStruct:thrift.NewTStruct("put_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tput", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *PutArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tput" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PutArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v507, err508 := iprot.ReadString()
  if err508 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err508); }
  p.Table = v507
  return err
}

func (p *PutArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PutArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tput = NewTPut()
  err511 := p.Tput.Read(iprot)
  if err511 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TputTPut", err511); }
  return err
}

func (p *PutArgs) ReadFieldTput(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PutArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("put_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PutArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *PutArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PutArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tput != nil {
    err = oprot.WriteFieldBegin("tput", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tput", p.ThriftName(), err); }
    err = p.Tput.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TPut", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tput", p.ThriftName(), err); }
  }
  return err
}

func (p *PutArgs) WriteFieldTput(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PutArgs) TStructName() string {
  return "PutArgs"
}

func (p *PutArgs) ThriftName() string {
  return "put_args"
}

func (p *PutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutArgs(%+v)", *p)
}

func (p *PutArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PutArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tput.CompareTo(data.Tput); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PutArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tput
  }
  return nil
}

func (p *PutArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tput", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Io
 */
type PutResult struct {
  thrift.TStruct
  Io *TIOError "io"; // 1
}

func NewPutResult() *PutResult {
  output := &PutResult{
    TStruct:thrift.NewTStruct("put_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PutResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PutResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err514 := p.Io.Read(iprot)
  if err514 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err514); }
  return err
}

func (p *PutResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PutResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("put_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PutResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *PutResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PutResult) TStructName() string {
  return "PutResult"
}

func (p *PutResult) ThriftName() string {
  return "put_result"
}

func (p *PutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutResult(%+v)", *p)
}

func (p *PutResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PutResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PutResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *PutResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: to check in and put to
 *  - Row: row to check
 *  - Family: column family to check
 *  - Qualifier: column qualifier to check
 *  - Value: the expected value, if not provided the
 * check is for the non-existence of the
 * column in question
 *  - Tput: the TPut to put if the check succeeds
 */
type CheckAndPutArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Row string "row"; // 2
  Family string "family"; // 3
  Qualifier string "qualifier"; // 4
  Value string "value"; // 5
  Tput *TPut "tput"; // 6
}

func NewCheckAndPutArgs() *CheckAndPutArgs {
  output := &CheckAndPutArgs{
    TStruct:thrift.NewTStruct("checkAndPut_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("family", thrift.STRING, 3),
    thrift.NewTField("qualifier", thrift.STRING, 4),
    thrift.NewTField("value", thrift.STRING, 5),
    thrift.NewTField("tput", thrift.STRUCT, 6),
    }),
  }
  {
  }
  return output
}

func (p *CheckAndPutArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "family" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "tput" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v515, err516 := iprot.ReadString()
  if err516 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err516); }
  p.Table = v515
  return err
}

func (p *CheckAndPutArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CheckAndPutArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v517, err518 := iprot.ReadString()
  if err518 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err518); }
  p.Row = v517
  return err
}

func (p *CheckAndPutArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CheckAndPutArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v519, err520 := iprot.ReadString()
  if err520 != nil { return thrift.NewTProtocolExceptionReadField(3, "family", p.ThriftName(), err520); }
  p.Family = v519
  return err
}

func (p *CheckAndPutArgs) ReadFieldFamily(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CheckAndPutArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v521, err522 := iprot.ReadString()
  if err522 != nil { return thrift.NewTProtocolExceptionReadField(4, "qualifier", p.ThriftName(), err522); }
  p.Qualifier = v521
  return err
}

func (p *CheckAndPutArgs) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CheckAndPutArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v523, err524 := iprot.ReadString()
  if err524 != nil { return thrift.NewTProtocolExceptionReadField(5, "value", p.ThriftName(), err524); }
  p.Value = v523
  return err
}

func (p *CheckAndPutArgs) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *CheckAndPutArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tput = NewTPut()
  err527 := p.Tput.Read(iprot)
  if err527 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TputTPut", err527); }
  return err
}

func (p *CheckAndPutArgs) ReadFieldTput(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *CheckAndPutArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("checkAndPut_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CheckAndPutArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CheckAndPutArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("family", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Family))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteFieldFamily(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CheckAndPutArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CheckAndPutArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutArgs) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *CheckAndPutArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tput != nil {
    err = oprot.WriteFieldBegin("tput", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tput", p.ThriftName(), err); }
    err = p.Tput.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TPut", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tput", p.ThriftName(), err); }
  }
  return err
}

func (p *CheckAndPutArgs) WriteFieldTput(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *CheckAndPutArgs) TStructName() string {
  return "CheckAndPutArgs"
}

func (p *CheckAndPutArgs) ThriftName() string {
  return "checkAndPut_args"
}

func (p *CheckAndPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndPutArgs(%+v)", *p)
}

func (p *CheckAndPutArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CheckAndPutArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Family != data.Family {
    if p.Family < data.Family {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tput.CompareTo(data.Tput); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CheckAndPutArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Row
  case 3: return p.Family
  case 4: return p.Qualifier
  case 5: return p.Value
  case 6: return p.Tput
  }
  return nil
}

func (p *CheckAndPutArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("family", thrift.STRING, 3),
    thrift.NewTField("qualifier", thrift.STRING, 4),
    thrift.NewTField("value", thrift.STRING, 5),
    thrift.NewTField("tput", thrift.STRUCT, 6),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type CheckAndPutResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  Io *TIOError "io"; // 1
}

func NewCheckAndPutResult() *CheckAndPutResult {
  output := &CheckAndPutResult{
    TStruct:thrift.NewTStruct("checkAndPut_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CheckAndPutResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v528, err529 := iprot.ReadBool()
  if err529 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err529); }
  p.Success = v528
  return err
}

func (p *CheckAndPutResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CheckAndPutResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err532 := p.Io.Read(iprot)
  if err532 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err532); }
  return err
}

func (p *CheckAndPutResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CheckAndPutResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("checkAndPut_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CheckAndPutResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CheckAndPutResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *CheckAndPutResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CheckAndPutResult) TStructName() string {
  return "CheckAndPutResult"
}

func (p *CheckAndPutResult) ThriftName() string {
  return "checkAndPut_result"
}

func (p *CheckAndPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndPutResult(%+v)", *p)
}

func (p *CheckAndPutResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CheckAndPutResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CheckAndPutResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *CheckAndPutResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to put data in
 *  - Tputs: a list of TPuts to commit
 */
type PutMultipleArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tputs thrift.TList "tputs"; // 2
}

func NewPutMultipleArgs() *PutMultipleArgs {
  output := &PutMultipleArgs{
    TStruct:thrift.NewTStruct("putMultiple_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tputs", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *PutMultipleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tputs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PutMultipleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v533, err534 := iprot.ReadString()
  if err534 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err534); }
  p.Table = v533
  return err
}

func (p *PutMultipleArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PutMultipleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype540, _size537, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Tputs", "", err)
  }
  p.Tputs = thrift.NewTList(_etype540, _size537)
  for _i541:= 0; _i541 < _size537; _i541++ {
    _elem542 := NewTPut()
    err545 := _elem542.Read(iprot)
    if err545 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem542TPut", err545); }
    p.Tputs.Push(_elem542)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PutMultipleArgs) ReadFieldTputs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PutMultipleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("putMultiple_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PutMultipleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *PutMultipleArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PutMultipleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tputs != nil {
    err = oprot.WriteFieldBegin("tputs", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tputs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Tputs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter546 := range p.Tputs.Iter() {
      Iter547 := Iter546.(*TPut)
      err = Iter547.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TPut", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tputs", p.ThriftName(), err); }
  }
  return err
}

func (p *PutMultipleArgs) WriteFieldTputs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PutMultipleArgs) TStructName() string {
  return "PutMultipleArgs"
}

func (p *PutMultipleArgs) ThriftName() string {
  return "putMultiple_args"
}

func (p *PutMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMultipleArgs(%+v)", *p)
}

func (p *PutMultipleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PutMultipleArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tputs.CompareTo(data.Tputs); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PutMultipleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tputs
  }
  return nil
}

func (p *PutMultipleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tputs", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Io
 */
type PutMultipleResult struct {
  thrift.TStruct
  Io *TIOError "io"; // 1
}

func NewPutMultipleResult() *PutMultipleResult {
  output := &PutMultipleResult{
    TStruct:thrift.NewTStruct("putMultiple_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PutMultipleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PutMultipleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err550 := p.Io.Read(iprot)
  if err550 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err550); }
  return err
}

func (p *PutMultipleResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PutMultipleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("putMultiple_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PutMultipleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *PutMultipleResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PutMultipleResult) TStructName() string {
  return "PutMultipleResult"
}

func (p *PutMultipleResult) ThriftName() string {
  return "putMultiple_result"
}

func (p *PutMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMultipleResult(%+v)", *p)
}

func (p *PutMultipleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PutMultipleResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PutMultipleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *PutMultipleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to delete from
 *  - Tdelete: the TDelete to delete
 */
type DeleteSingleArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tdelete *TDelete "tdelete"; // 2
}

func NewDeleteSingleArgs() *DeleteSingleArgs {
  output := &DeleteSingleArgs{
    TStruct:thrift.NewTStruct("deleteSingle_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tdelete", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DeleteSingleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tdelete" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteSingleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v551, err552 := iprot.ReadString()
  if err552 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err552); }
  p.Table = v551
  return err
}

func (p *DeleteSingleArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteSingleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tdelete = NewTDelete()
  err555 := p.Tdelete.Read(iprot)
  if err555 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TdeleteTDelete", err555); }
  return err
}

func (p *DeleteSingleArgs) ReadFieldTdelete(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteSingleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteSingle_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteSingleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *DeleteSingleArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteSingleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tdelete != nil {
    err = oprot.WriteFieldBegin("tdelete", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tdelete", p.ThriftName(), err); }
    err = p.Tdelete.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TDelete", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tdelete", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteSingleArgs) WriteFieldTdelete(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteSingleArgs) TStructName() string {
  return "DeleteSingleArgs"
}

func (p *DeleteSingleArgs) ThriftName() string {
  return "deleteSingle_args"
}

func (p *DeleteSingleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSingleArgs(%+v)", *p)
}

func (p *DeleteSingleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteSingleArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tdelete.CompareTo(data.Tdelete); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteSingleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tdelete
  }
  return nil
}

func (p *DeleteSingleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tdelete", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteSingleResult struct {
  thrift.TStruct
  Io *TIOError "io"; // 1
}

func NewDeleteSingleResult() *DeleteSingleResult {
  output := &DeleteSingleResult{
    TStruct:thrift.NewTStruct("deleteSingle_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteSingleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteSingleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err558 := p.Io.Read(iprot)
  if err558 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err558); }
  return err
}

func (p *DeleteSingleResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteSingleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteSingle_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteSingleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteSingleResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteSingleResult) TStructName() string {
  return "DeleteSingleResult"
}

func (p *DeleteSingleResult) ThriftName() string {
  return "deleteSingle_result"
}

func (p *DeleteSingleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSingleResult(%+v)", *p)
}

func (p *DeleteSingleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteSingleResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteSingleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteSingleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to delete from
 *  - Tdeletes: list of TDeletes to delete
 */
type DeleteMultipleArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tdeletes thrift.TList "tdeletes"; // 2
}

func NewDeleteMultipleArgs() *DeleteMultipleArgs {
  output := &DeleteMultipleArgs{
    TStruct:thrift.NewTStruct("deleteMultiple_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tdeletes", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *DeleteMultipleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tdeletes" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteMultipleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v559, err560 := iprot.ReadString()
  if err560 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err560); }
  p.Table = v559
  return err
}

func (p *DeleteMultipleArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteMultipleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype566, _size563, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Tdeletes", "", err)
  }
  p.Tdeletes = thrift.NewTList(_etype566, _size563)
  for _i567:= 0; _i567 < _size563; _i567++ {
    _elem568 := NewTDelete()
    err571 := _elem568.Read(iprot)
    if err571 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem568TDelete", err571); }
    p.Tdeletes.Push(_elem568)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *DeleteMultipleArgs) ReadFieldTdeletes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteMultipleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteMultiple_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteMultipleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *DeleteMultipleArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteMultipleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tdeletes != nil {
    err = oprot.WriteFieldBegin("tdeletes", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tdeletes", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Tdeletes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter572 := range p.Tdeletes.Iter() {
      Iter573 := Iter572.(*TDelete)
      err = Iter573.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TDelete", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tdeletes", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteMultipleArgs) WriteFieldTdeletes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteMultipleArgs) TStructName() string {
  return "DeleteMultipleArgs"
}

func (p *DeleteMultipleArgs) ThriftName() string {
  return "deleteMultiple_args"
}

func (p *DeleteMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteMultipleArgs(%+v)", *p)
}

func (p *DeleteMultipleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteMultipleArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tdeletes.CompareTo(data.Tdeletes); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteMultipleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tdeletes
  }
  return nil
}

func (p *DeleteMultipleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tdeletes", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type DeleteMultipleResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *TIOError "io"; // 1
}

func NewDeleteMultipleResult() *DeleteMultipleResult {
  output := &DeleteMultipleResult{
    TStruct:thrift.NewTStruct("deleteMultiple_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteMultipleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteMultipleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype579, _size576, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype579, _size576)
  for _i580:= 0; _i580 < _size576; _i580++ {
    _elem581 := NewTDelete()
    err584 := _elem581.Read(iprot)
    if err584 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem581TDelete", err584); }
    p.Success.Push(_elem581)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *DeleteMultipleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DeleteMultipleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err587 := p.Io.Read(iprot)
  if err587 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err587); }
  return err
}

func (p *DeleteMultipleResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteMultipleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteMultiple_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteMultipleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter588 := range p.Success.Iter() {
      Iter589 := Iter588.(*TDelete)
      err = Iter589.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TDelete", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteMultipleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DeleteMultipleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteMultipleResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteMultipleResult) TStructName() string {
  return "DeleteMultipleResult"
}

func (p *DeleteMultipleResult) ThriftName() string {
  return "deleteMultiple_result"
}

func (p *DeleteMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteMultipleResult(%+v)", *p)
}

func (p *DeleteMultipleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteMultipleResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteMultipleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteMultipleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: to check in and delete from
 *  - Row: row to check
 *  - Family: column family to check
 *  - Qualifier: column qualifier to check
 *  - Value: the expected value, if not provided the
 * check is for the non-existence of the
 * column in question
 *  - Tdelete: the TDelete to execute if the check succeeds
 */
type CheckAndDeleteArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Row string "row"; // 2
  Family string "family"; // 3
  Qualifier string "qualifier"; // 4
  Value string "value"; // 5
  Tdelete *TDelete "tdelete"; // 6
}

func NewCheckAndDeleteArgs() *CheckAndDeleteArgs {
  output := &CheckAndDeleteArgs{
    TStruct:thrift.NewTStruct("checkAndDelete_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("family", thrift.STRING, 3),
    thrift.NewTField("qualifier", thrift.STRING, 4),
    thrift.NewTField("value", thrift.STRING, 5),
    thrift.NewTField("tdelete", thrift.STRUCT, 6),
    }),
  }
  {
  }
  return output
}

func (p *CheckAndDeleteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "family" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "tdelete" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v590, err591 := iprot.ReadString()
  if err591 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err591); }
  p.Table = v590
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CheckAndDeleteArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v592, err593 := iprot.ReadString()
  if err593 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err593); }
  p.Row = v592
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CheckAndDeleteArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v594, err595 := iprot.ReadString()
  if err595 != nil { return thrift.NewTProtocolExceptionReadField(3, "family", p.ThriftName(), err595); }
  p.Family = v594
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldFamily(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CheckAndDeleteArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v596, err597 := iprot.ReadString()
  if err597 != nil { return thrift.NewTProtocolExceptionReadField(4, "qualifier", p.ThriftName(), err597); }
  p.Qualifier = v596
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CheckAndDeleteArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v598, err599 := iprot.ReadString()
  if err599 != nil { return thrift.NewTProtocolExceptionReadField(5, "value", p.ThriftName(), err599); }
  p.Value = v598
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *CheckAndDeleteArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tdelete = NewTDelete()
  err602 := p.Tdelete.Read(iprot)
  if err602 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TdeleteTDelete", err602); }
  return err
}

func (p *CheckAndDeleteArgs) ReadFieldTdelete(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *CheckAndDeleteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("checkAndDelete_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CheckAndDeleteArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CheckAndDeleteArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("family", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Family))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldFamily(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CheckAndDeleteArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CheckAndDeleteArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "value", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *CheckAndDeleteArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tdelete != nil {
    err = oprot.WriteFieldBegin("tdelete", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tdelete", p.ThriftName(), err); }
    err = p.Tdelete.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TDelete", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tdelete", p.ThriftName(), err); }
  }
  return err
}

func (p *CheckAndDeleteArgs) WriteFieldTdelete(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *CheckAndDeleteArgs) TStructName() string {
  return "CheckAndDeleteArgs"
}

func (p *CheckAndDeleteArgs) ThriftName() string {
  return "checkAndDelete_args"
}

func (p *CheckAndDeleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndDeleteArgs(%+v)", *p)
}

func (p *CheckAndDeleteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CheckAndDeleteArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Family != data.Family {
    if p.Family < data.Family {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tdelete.CompareTo(data.Tdelete); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CheckAndDeleteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Row
  case 3: return p.Family
  case 4: return p.Qualifier
  case 5: return p.Value
  case 6: return p.Tdelete
  }
  return nil
}

func (p *CheckAndDeleteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("family", thrift.STRING, 3),
    thrift.NewTField("qualifier", thrift.STRING, 4),
    thrift.NewTField("value", thrift.STRING, 5),
    thrift.NewTField("tdelete", thrift.STRUCT, 6),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type CheckAndDeleteResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  Io *TIOError "io"; // 1
}

func NewCheckAndDeleteResult() *CheckAndDeleteResult {
  output := &CheckAndDeleteResult{
    TStruct:thrift.NewTStruct("checkAndDelete_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CheckAndDeleteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v603, err604 := iprot.ReadBool()
  if err604 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err604); }
  p.Success = v603
  return err
}

func (p *CheckAndDeleteResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CheckAndDeleteResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err607 := p.Io.Read(iprot)
  if err607 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err607); }
  return err
}

func (p *CheckAndDeleteResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CheckAndDeleteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("checkAndDelete_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CheckAndDeleteResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CheckAndDeleteResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *CheckAndDeleteResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CheckAndDeleteResult) TStructName() string {
  return "CheckAndDeleteResult"
}

func (p *CheckAndDeleteResult) ThriftName() string {
  return "checkAndDelete_result"
}

func (p *CheckAndDeleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndDeleteResult(%+v)", *p)
}

func (p *CheckAndDeleteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CheckAndDeleteResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CheckAndDeleteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *CheckAndDeleteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to increment the value on
 *  - Tincrement: the TIncrement to increment
 */
type IncrementArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tincrement *TIncrement "tincrement"; // 2
}

func NewIncrementArgs() *IncrementArgs {
  output := &IncrementArgs{
    TStruct:thrift.NewTStruct("increment_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tincrement", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *IncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tincrement" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IncrementArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v608, err609 := iprot.ReadString()
  if err609 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err609); }
  p.Table = v608
  return err
}

func (p *IncrementArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IncrementArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tincrement = NewTIncrement()
  err612 := p.Tincrement.Read(iprot)
  if err612 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TincrementTIncrement", err612); }
  return err
}

func (p *IncrementArgs) ReadFieldTincrement(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("increment_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IncrementArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *IncrementArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IncrementArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tincrement != nil {
    err = oprot.WriteFieldBegin("tincrement", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tincrement", p.ThriftName(), err); }
    err = p.Tincrement.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tincrement", p.ThriftName(), err); }
  }
  return err
}

func (p *IncrementArgs) WriteFieldTincrement(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IncrementArgs) TStructName() string {
  return "IncrementArgs"
}

func (p *IncrementArgs) ThriftName() string {
  return "increment_args"
}

func (p *IncrementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrementArgs(%+v)", *p)
}

func (p *IncrementArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IncrementArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tincrement.CompareTo(data.Tincrement); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IncrementArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tincrement
  }
  return nil
}

func (p *IncrementArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tincrement", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type IncrementResult struct {
  thrift.TStruct
  Success *TResult "success"; // 0
  Io *TIOError "io"; // 1
}

func NewIncrementResult() *IncrementResult {
  output := &IncrementResult{
    TStruct:thrift.NewTStruct("increment_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IncrementResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTResult()
  err615 := p.Success.Read(iprot)
  if err615 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTResult", err615); }
  return err
}

func (p *IncrementResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IncrementResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err618 := p.Io.Read(iprot)
  if err618 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err618); }
  return err
}

func (p *IncrementResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("increment_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IncrementResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *IncrementResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IncrementResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *IncrementResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IncrementResult) TStructName() string {
  return "IncrementResult"
}

func (p *IncrementResult) ThriftName() string {
  return "increment_result"
}

func (p *IncrementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrementResult(%+v)", *p)
}

func (p *IncrementResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IncrementResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IncrementResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *IncrementResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to append the value on
 *  - Tappend: the TAppend to append
 */
type AppendArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tappend *TAppend "tappend"; // 2
}

func NewAppendArgs() *AppendArgs {
  output := &AppendArgs{
    TStruct:thrift.NewTStruct("append_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tappend", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AppendArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tappend" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v619, err620 := iprot.ReadString()
  if err620 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err620); }
  p.Table = v619
  return err
}

func (p *AppendArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tappend = NewTAppend()
  err623 := p.Tappend.Read(iprot)
  if err623 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TappendTAppend", err623); }
  return err
}

func (p *AppendArgs) ReadFieldTappend(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AppendArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *AppendArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tappend != nil {
    err = oprot.WriteFieldBegin("tappend", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tappend", p.ThriftName(), err); }
    err = p.Tappend.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TAppend", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tappend", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendArgs) WriteFieldTappend(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AppendArgs) TStructName() string {
  return "AppendArgs"
}

func (p *AppendArgs) ThriftName() string {
  return "append_args"
}

func (p *AppendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendArgs(%+v)", *p)
}

func (p *AppendArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tappend.CompareTo(data.Tappend); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tappend
  }
  return nil
}

func (p *AppendArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tappend", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type AppendResult struct {
  thrift.TStruct
  Success *TResult "success"; // 0
  Io *TIOError "io"; // 1
}

func NewAppendResult() *AppendResult {
  output := &AppendResult{
    TStruct:thrift.NewTStruct("append_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *AppendResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTResult()
  err626 := p.Success.Read(iprot)
  if err626 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTResult", err626); }
  return err
}

func (p *AppendResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AppendResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err629 := p.Io.Read(iprot)
  if err629 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err629); }
  return err
}

func (p *AppendResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AppendResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendResult) TStructName() string {
  return "AppendResult"
}

func (p *AppendResult) ThriftName() string {
  return "append_result"
}

func (p *AppendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendResult(%+v)", *p)
}

func (p *AppendResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *AppendResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to get the Scanner for
 *  - Tscan: the scan object to get a Scanner for
 */
type OpenScannerArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tscan *TScan "tscan"; // 2
}

func NewOpenScannerArgs() *OpenScannerArgs {
  output := &OpenScannerArgs{
    TStruct:thrift.NewTStruct("openScanner_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tscan", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *OpenScannerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tscan" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *OpenScannerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v630, err631 := iprot.ReadString()
  if err631 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err631); }
  p.Table = v630
  return err
}

func (p *OpenScannerArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *OpenScannerArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tscan = NewTScan()
  err634 := p.Tscan.Read(iprot)
  if err634 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TscanTScan", err634); }
  return err
}

func (p *OpenScannerArgs) ReadFieldTscan(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *OpenScannerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("openScanner_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *OpenScannerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *OpenScannerArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *OpenScannerArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tscan != nil {
    err = oprot.WriteFieldBegin("tscan", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tscan", p.ThriftName(), err); }
    err = p.Tscan.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TScan", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tscan", p.ThriftName(), err); }
  }
  return err
}

func (p *OpenScannerArgs) WriteFieldTscan(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *OpenScannerArgs) TStructName() string {
  return "OpenScannerArgs"
}

func (p *OpenScannerArgs) ThriftName() string {
  return "openScanner_args"
}

func (p *OpenScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenScannerArgs(%+v)", *p)
}

func (p *OpenScannerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*OpenScannerArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tscan.CompareTo(data.Tscan); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *OpenScannerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tscan
  }
  return nil
}

func (p *OpenScannerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tscan", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type OpenScannerResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
  Io *TIOError "io"; // 1
}

func NewOpenScannerResult() *OpenScannerResult {
  output := &OpenScannerResult{
    TStruct:thrift.NewTStruct("openScanner_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *OpenScannerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *OpenScannerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v635, err636 := iprot.ReadI32()
  if err636 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err636); }
  p.Success = v635
  return err
}

func (p *OpenScannerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *OpenScannerResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err639 := p.Io.Read(iprot)
  if err639 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err639); }
  return err
}

func (p *OpenScannerResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *OpenScannerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("openScanner_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *OpenScannerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *OpenScannerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *OpenScannerResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *OpenScannerResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *OpenScannerResult) TStructName() string {
  return "OpenScannerResult"
}

func (p *OpenScannerResult) ThriftName() string {
  return "openScanner_result"
}

func (p *OpenScannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenScannerResult(%+v)", *p)
}

func (p *OpenScannerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*OpenScannerResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *OpenScannerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *OpenScannerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
 *  - NumRows: number of rows to return
 */
type GetScannerRowsArgs struct {
  thrift.TStruct
  ScannerId int32 "scannerId"; // 1
  NumRows int32 "numRows"; // 2
}

func NewGetScannerRowsArgs() *GetScannerRowsArgs {
  output := &GetScannerRowsArgs{
    TStruct:thrift.NewTStruct("getScannerRows_args", []thrift.TField{
    thrift.NewTField("scannerId", thrift.I32, 1),
    thrift.NewTField("numRows", thrift.I32, 2),
    }),
  }
  {
    output.NumRows = 1
  }
  return output
}

func (p *GetScannerRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "scannerId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "numRows" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v640, err641 := iprot.ReadI32()
  if err641 != nil { return thrift.NewTProtocolExceptionReadField(1, "scannerId", p.ThriftName(), err641); }
  p.ScannerId = v640
  return err
}

func (p *GetScannerRowsArgs) ReadFieldScannerId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetScannerRowsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v642, err643 := iprot.ReadI32()
  if err643 != nil { return thrift.NewTProtocolExceptionReadField(2, "numRows", p.ThriftName(), err643); }
  p.NumRows = v642
  return err
}

func (p *GetScannerRowsArgs) ReadFieldNumRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetScannerRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getScannerRows_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("scannerId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ScannerId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsArgs) WriteFieldScannerId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetScannerRowsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("numRows", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "numRows", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumRows))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "numRows", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "numRows", p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsArgs) WriteFieldNumRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetScannerRowsArgs) TStructName() string {
  return "GetScannerRowsArgs"
}

func (p *GetScannerRowsArgs) ThriftName() string {
  return "getScannerRows_args"
}

func (p *GetScannerRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetScannerRowsArgs(%+v)", *p)
}

func (p *GetScannerRowsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetScannerRowsArgs)
  if !ok {
    return 0, false
  }
  if p.ScannerId != data.ScannerId {
    if p.ScannerId < data.ScannerId {
      return -1, true
    }
    return 1, true
  }
  if p.NumRows != data.NumRows {
    if p.NumRows < data.NumRows {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetScannerRowsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ScannerId
  case 2: return p.NumRows
  }
  return nil
}

func (p *GetScannerRowsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("scannerId", thrift.I32, 1),
    thrift.NewTField("numRows", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia: if the scannerId is invalid
 */
type GetScannerRowsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *TIOError "io"; // 1
  Ia *TIllegalArgument "ia"; // 2
}

func NewGetScannerRowsResult() *GetScannerRowsResult {
  output := &GetScannerRowsResult{
    TStruct:thrift.NewTStruct("getScannerRows_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetScannerRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype649, _size646, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype649, _size646)
  for _i650:= 0; _i650 < _size646; _i650++ {
    _elem651 := NewTResult()
    err654 := _elem651.Read(iprot)
    if err654 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem651TResult", err654); }
    p.Success.Push(_elem651)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetScannerRowsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetScannerRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err657 := p.Io.Read(iprot)
  if err657 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err657); }
  return err
}

func (p *GetScannerRowsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetScannerRowsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewTIllegalArgument()
  err660 := p.Ia.Read(iprot)
  if err660 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaTIllegalArgument", err660); }
  return err
}

func (p *GetScannerRowsResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetScannerRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getScannerRows_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerRowsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter661 := range p.Success.Iter() {
      Iter662 := Iter661.(*TResult)
      err = Iter662.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerRowsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetScannerRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerRowsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetScannerRowsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerRowsResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetScannerRowsResult) TStructName() string {
  return "GetScannerRowsResult"
}

func (p *GetScannerRowsResult) ThriftName() string {
  return "getScannerRows_result"
}

func (p *GetScannerRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetScannerRowsResult(%+v)", *p)
}

func (p *GetScannerRowsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetScannerRowsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetScannerRowsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *GetScannerRowsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - ScannerId: the Id of the Scanner to close *
 */
type CloseScannerArgs struct {
  thrift.TStruct
  ScannerId int32 "scannerId"; // 1
}

func NewCloseScannerArgs() *CloseScannerArgs {
  output := &CloseScannerArgs{
    TStruct:thrift.NewTStruct("closeScanner_args", []thrift.TField{
    thrift.NewTField("scannerId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *CloseScannerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "scannerId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CloseScannerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v663, err664 := iprot.ReadI32()
  if err664 != nil { return thrift.NewTProtocolExceptionReadField(1, "scannerId", p.ThriftName(), err664); }
  p.ScannerId = v663
  return err
}

func (p *CloseScannerArgs) ReadFieldScannerId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CloseScannerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("closeScanner_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CloseScannerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("scannerId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ScannerId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "scannerId", p.ThriftName(), err); }
  return err
}

func (p *CloseScannerArgs) WriteFieldScannerId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CloseScannerArgs) TStructName() string {
  return "CloseScannerArgs"
}

func (p *CloseScannerArgs) ThriftName() string {
  return "closeScanner_args"
}

func (p *CloseScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CloseScannerArgs(%+v)", *p)
}

func (p *CloseScannerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CloseScannerArgs)
  if !ok {
    return 0, false
  }
  if p.ScannerId != data.ScannerId {
    if p.ScannerId < data.ScannerId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CloseScannerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ScannerId
  }
  return nil
}

func (p *CloseScannerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("scannerId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia: if the scannerId is invalid
 */
type CloseScannerResult struct {
  thrift.TStruct
  Io *TIOError "io"; // 1
  Ia *TIllegalArgument "ia"; // 2
}

func NewCloseScannerResult() *CloseScannerResult {
  output := &CloseScannerResult{
    TStruct:thrift.NewTStruct("closeScanner_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *CloseScannerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CloseScannerResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err667 := p.Io.Read(iprot)
  if err667 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err667); }
  return err
}

func (p *CloseScannerResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CloseScannerResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewTIllegalArgument()
  err670 := p.Ia.Read(iprot)
  if err670 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaTIllegalArgument", err670); }
  return err
}

func (p *CloseScannerResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CloseScannerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("closeScanner_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CloseScannerResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *CloseScannerResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CloseScannerResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *CloseScannerResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CloseScannerResult) TStructName() string {
  return "CloseScannerResult"
}

func (p *CloseScannerResult) ThriftName() string {
  return "closeScanner_result"
}

func (p *CloseScannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CloseScannerResult(%+v)", *p)
}

func (p *CloseScannerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CloseScannerResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CloseScannerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *CloseScannerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Table: table to apply the mutations
 *  - TrowMutations: mutations to apply
 */
type MutateRowArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  TrowMutations *TRowMutations "trowMutations"; // 2
}

func NewMutateRowArgs() *MutateRowArgs {
  output := &MutateRowArgs{
    TStruct:thrift.NewTStruct("mutateRow_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("trowMutations", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "trowMutations" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v671, err672 := iprot.ReadString()
  if err672 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err672); }
  p.Table = v671
  return err
}

func (p *MutateRowArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.TrowMutations = NewTRowMutations()
  err675 := p.TrowMutations.Read(iprot)
  if err675 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TrowMutationsTRowMutations", err675); }
  return err
}

func (p *MutateRowArgs) ReadFieldTrowMutations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRow_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TrowMutations != nil {
    err = oprot.WriteFieldBegin("trowMutations", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "trowMutations", p.ThriftName(), err); }
    err = p.TrowMutations.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowMutations", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "trowMutations", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowArgs) WriteFieldTrowMutations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowArgs) TStructName() string {
  return "MutateRowArgs"
}

func (p *MutateRowArgs) ThriftName() string {
  return "mutateRow_args"
}

func (p *MutateRowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowArgs(%+v)", *p)
}

func (p *MutateRowArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.TrowMutations.CompareTo(data.TrowMutations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.TrowMutations
  }
  return nil
}

func (p *MutateRowArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("trowMutations", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Io
 */
type MutateRowResult struct {
  thrift.TStruct
  Io *TIOError "io"; // 1
}

func NewMutateRowResult() *MutateRowResult {
  output := &MutateRowResult{
    TStruct:thrift.NewTStruct("mutateRow_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err678 := p.Io.Read(iprot)
  if err678 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err678); }
  return err
}

func (p *MutateRowResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRow_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowResult) TStructName() string {
  return "MutateRowResult"
}

func (p *MutateRowResult) ThriftName() string {
  return "mutateRow_result"
}

func (p *MutateRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowResult(%+v)", *p)
}

func (p *MutateRowResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *MutateRowResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table: the table to get the Scanner for
 *  - Tscan: the scan object to get a Scanner for
 *  - NumRows: number of rows to return
 */
type GetScannerResultsArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Tscan *TScan "tscan"; // 2
  NumRows int32 "numRows"; // 3
}

func NewGetScannerResultsArgs() *GetScannerResultsArgs {
  output := &GetScannerResultsArgs{
    TStruct:thrift.NewTStruct("getScannerResults_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tscan", thrift.STRUCT, 2),
    thrift.NewTField("numRows", thrift.I32, 3),
    }),
  }
  {
    output.NumRows = 1
  }
  return output
}

func (p *GetScannerResultsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tscan" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "numRows" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v679, err680 := iprot.ReadString()
  if err680 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err680); }
  p.Table = v679
  return err
}

func (p *GetScannerResultsArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetScannerResultsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tscan = NewTScan()
  err683 := p.Tscan.Read(iprot)
  if err683 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TscanTScan", err683); }
  return err
}

func (p *GetScannerResultsArgs) ReadFieldTscan(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetScannerResultsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v684, err685 := iprot.ReadI32()
  if err685 != nil { return thrift.NewTProtocolExceptionReadField(3, "numRows", p.ThriftName(), err685); }
  p.NumRows = v684
  return err
}

func (p *GetScannerResultsArgs) ReadFieldNumRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetScannerResultsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getScannerResults_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetScannerResultsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tscan != nil {
    err = oprot.WriteFieldBegin("tscan", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tscan", p.ThriftName(), err); }
    err = p.Tscan.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TScan", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tscan", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerResultsArgs) WriteFieldTscan(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetScannerResultsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("numRows", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "numRows", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumRows))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "numRows", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "numRows", p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsArgs) WriteFieldNumRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetScannerResultsArgs) TStructName() string {
  return "GetScannerResultsArgs"
}

func (p *GetScannerResultsArgs) ThriftName() string {
  return "getScannerResults_args"
}

func (p *GetScannerResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetScannerResultsArgs(%+v)", *p)
}

func (p *GetScannerResultsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetScannerResultsArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tscan.CompareTo(data.Tscan); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.NumRows != data.NumRows {
    if p.NumRows < data.NumRows {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetScannerResultsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Tscan
  case 3: return p.NumRows
  }
  return nil
}

func (p *GetScannerResultsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("tscan", thrift.STRUCT, 2),
    thrift.NewTField("numRows", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetScannerResultsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *TIOError "io"; // 1
}

func NewGetScannerResultsResult() *GetScannerResultsResult {
  output := &GetScannerResultsResult{
    TStruct:thrift.NewTStruct("getScannerResults_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetScannerResultsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype691, _size688, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype691, _size688)
  for _i692:= 0; _i692 < _size688; _i692++ {
    _elem693 := NewTResult()
    err696 := _elem693.Read(iprot)
    if err696 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem693TResult", err696); }
    p.Success.Push(_elem693)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetScannerResultsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetScannerResultsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err699 := p.Io.Read(iprot)
  if err699 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err699); }
  return err
}

func (p *GetScannerResultsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetScannerResultsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getScannerResults_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetScannerResultsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter700 := range p.Success.Iter() {
      Iter701 := Iter700.(*TResult)
      err = Iter701.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerResultsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetScannerResultsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetScannerResultsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetScannerResultsResult) TStructName() string {
  return "GetScannerResultsResult"
}

func (p *GetScannerResultsResult) ThriftName() string {
  return "getScannerResults_result"
}

func (p *GetScannerResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetScannerResultsResult(%+v)", *p)
}

func (p *GetScannerResultsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetScannerResultsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetScannerResultsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetScannerResultsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table
 *  - Row
 *  - Reload
 */
type GetRegionLocationArgs struct {
  thrift.TStruct
  Table string "table"; // 1
  Row string "row"; // 2
  Reload bool "reload"; // 3
}

func NewGetRegionLocationArgs() *GetRegionLocationArgs {
  output := &GetRegionLocationArgs{
    TStruct:thrift.NewTStruct("getRegionLocation_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("reload", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetRegionLocationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "reload" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v702, err703 := iprot.ReadString()
  if err703 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err703); }
  p.Table = v702
  return err
}

func (p *GetRegionLocationArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRegionLocationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v704, err705 := iprot.ReadString()
  if err705 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err705); }
  p.Row = v704
  return err
}

func (p *GetRegionLocationArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRegionLocationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v706, err707 := iprot.ReadBool()
  if err707 != nil { return thrift.NewTProtocolExceptionReadField(3, "reload", p.ThriftName(), err707); }
  p.Reload = v706
  return err
}

func (p *GetRegionLocationArgs) ReadFieldReload(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRegionLocationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRegionLocation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRegionLocationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRegionLocationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("reload", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "reload", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Reload))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "reload", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "reload", p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationArgs) WriteFieldReload(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRegionLocationArgs) TStructName() string {
  return "GetRegionLocationArgs"
}

func (p *GetRegionLocationArgs) ThriftName() string {
  return "getRegionLocation_args"
}

func (p *GetRegionLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRegionLocationArgs(%+v)", *p)
}

func (p *GetRegionLocationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRegionLocationArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.Reload, data.Reload); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *GetRegionLocationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  case 2: return p.Row
  case 3: return p.Reload
  }
  return nil
}

func (p *GetRegionLocationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("reload", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRegionLocationResult struct {
  thrift.TStruct
  Success *THRegionLocation "success"; // 0
  Io *TIOError "io"; // 1
}

func NewGetRegionLocationResult() *GetRegionLocationResult {
  output := &GetRegionLocationResult{
    TStruct:thrift.NewTStruct("getRegionLocation_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRegionLocationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTHRegionLocation()
  err710 := p.Success.Read(iprot)
  if err710 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTHRegionLocation", err710); }
  return err
}

func (p *GetRegionLocationResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRegionLocationResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err713 := p.Io.Read(iprot)
  if err713 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err713); }
  return err
}

func (p *GetRegionLocationResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRegionLocationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRegionLocation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRegionLocationResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("THRegionLocation", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRegionLocationResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRegionLocationResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRegionLocationResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRegionLocationResult) TStructName() string {
  return "GetRegionLocationResult"
}

func (p *GetRegionLocationResult) ThriftName() string {
  return "getRegionLocation_result"
}

func (p *GetRegionLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRegionLocationResult(%+v)", *p)
}

func (p *GetRegionLocationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRegionLocationResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRegionLocationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRegionLocationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Table
 */
type GetAllRegionLocationsArgs struct {
  thrift.TStruct
  Table string "table"; // 1
}

func NewGetAllRegionLocationsArgs() *GetAllRegionLocationsArgs {
  output := &GetAllRegionLocationsArgs{
    TStruct:thrift.NewTStruct("getAllRegionLocations_args", []thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetAllRegionLocationsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "table" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllRegionLocationsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v714, err715 := iprot.ReadString()
  if err715 != nil { return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err715); }
  p.Table = v714
  return err
}

func (p *GetAllRegionLocationsArgs) ReadFieldTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllRegionLocationsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getAllRegionLocations_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllRegionLocationsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Table))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err); }
  return err
}

func (p *GetAllRegionLocationsArgs) WriteFieldTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllRegionLocationsArgs) TStructName() string {
  return "GetAllRegionLocationsArgs"
}

func (p *GetAllRegionLocationsArgs) ThriftName() string {
  return "getAllRegionLocations_args"
}

func (p *GetAllRegionLocationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllRegionLocationsArgs(%+v)", *p)
}

func (p *GetAllRegionLocationsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllRegionLocationsArgs)
  if !ok {
    return 0, false
  }
  if p.Table != data.Table {
    if p.Table < data.Table {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetAllRegionLocationsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Table
  }
  return nil
}

func (p *GetAllRegionLocationsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("table", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetAllRegionLocationsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *TIOError "io"; // 1
}

func NewGetAllRegionLocationsResult() *GetAllRegionLocationsResult {
  output := &GetAllRegionLocationsResult{
    TStruct:thrift.NewTStruct("getAllRegionLocations_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetAllRegionLocationsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllRegionLocationsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype721, _size718, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype721, _size718)
  for _i722:= 0; _i722 < _size718; _i722++ {
    _elem723 := NewTHRegionLocation()
    err726 := _elem723.Read(iprot)
    if err726 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem723THRegionLocation", err726); }
    p.Success.Push(_elem723)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAllRegionLocationsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAllRegionLocationsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewTIOError()
  err729 := p.Io.Read(iprot)
  if err729 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoTIOError", err729); }
  return err
}

func (p *GetAllRegionLocationsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllRegionLocationsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getAllRegionLocations_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllRegionLocationsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter730 := range p.Success.Iter() {
      Iter731 := Iter730.(*THRegionLocation)
      err = Iter731.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("THRegionLocation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllRegionLocationsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAllRegionLocationsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TIOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllRegionLocationsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllRegionLocationsResult) TStructName() string {
  return "GetAllRegionLocationsResult"
}

func (p *GetAllRegionLocationsResult) ThriftName() string {
  return "getAllRegionLocations_result"
}

func (p *GetAllRegionLocationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllRegionLocationsResult(%+v)", *p)
}

func (p *GetAllRegionLocationsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllRegionLocationsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllRegionLocationsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetAllRegionLocationsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}


